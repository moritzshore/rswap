add <- data.frame(param = "INLIST_CSV", value = "", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("SWCSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "SWCSV_TZ", value = "1", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("INLIST_CSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV_TZ ", value = "'WC,H,TEMP'", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}else{
params$value[which(params$param=="INLIST_CSV_TZ")] = "'WC,H,TEMP'"
}
# Set output wrapper function
params <- set_swap_output(params, variables, depths, verbose)
# print
if (verbose) {
cat(
"\n...autosetting SWAP output to match observed files\n")
}
}
# change console output based on verbose flag
if (verbose) {
params <- change_swap_par(params, "SWSCRE", 2)
}else{
params <- change_swap_par(params, "SWSCRE", 0)
}
# location for where the swap file is to be written
# change this name to "rswap.swp"?
outpath <- paste0(rswap_directory, "/", swap_file)
outpath <- paste0(rswap_directory, "/", swap_file)
outpath
# Write swap file
rswap_file <- write_swap_file(
parameters = params,
table_path = parse_result$table_path,
outpath = outpath,
verbose = verbose
)
work_dir
swap_file_path
# Parse paths
seperated <- project_path %>% str_split("/") %>% unlist()
project <- seperated %>% tail(1)
work_dir <-seperated[1:length(seperated)-1] %>% paste(collapse = "/")
swap_exe <- work_dir %>% paste(collapse = "/") %>% paste0(.,"/swap.exe")
swap_file_path <- glue("{project}/rswap/{swap_file}")
swap_file_path
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = swap_file_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
# TODO expand this
if (msg$status != "100") {
warning(glue("SWAP error, code {msg$status}"))
if (msg$status == "2") {
warning(glue("SWAP model timed out, with timeout {timeout}"))
}
}
reruns <- paste0(work_dir, "/reruns.log")
if (file.exists(reruns)) {
file.copy(from  = reruns,
to = paste0(work_dir, "/", project, "/rswap/reruns.log"))
file.remove(reruns)
if (verbose) {
cat("\n...copying reruns.log to rswap directory\n")
}
}
swap_ok <- paste0(work_dir, "/swap.ok")
if (file.exists(swap_ok)) {
file.copy(from  = swap_ok,
to = paste0(work_dir, "/", project, "/rswap/swap.ok"))
file.remove(swap_ok)
if (verbose) {
cat("\n...copying swap.ok to rswap directory\n")
}
}
msg$status
status <-
run_swap(
project_path = "C:/Users/mosh/Documents/rswap_local/hupselbrook",
verbose = T,
autoset_output = T,
quiet = T
)
parse_swp_file(project_path, "swap.swp")
modelled_data$daily_output
modelled_data$custom_depth
observed_data <- load_observed(project_path)
observed_data$data
library(rswap)
observed_data$observed_variables
get_depths(observed_data$data, variable = "WC")
plot_over_under(project_path,
variable = "WC",
depth = c(15, 40, 70))
soft_calibration_plot(project_path, vars = c("H", "WC", "DRAINAGE"))
run_swap(project_path, autoset_output = T)
library(rswap)
status <-
run_swap(
project_path = "C:/Users/mosh/Documents/rswap_local/hupselbrook",
verbose = T,
autoset_output = T,
quiet = T
)
modelled_data <- read_swap_output(project_path = project_path)
parse_swp_file(project_path, "swap.swp")
modelled_data$daily_output
modelled_data$custom_depth
observed_data <- load_observed(project_path)
observed_data$data
observed_data$observed_variables
get_depths(observed_data$data, variable = "WC")
plot_over_under(project_path,
variable = "WC",
depth = c(15, 40, 70))
soft_calibration_plot(project_path, vars = c("H", "WC", "DRAINAGE"))
run_swap(project_path, autoset_output = T)
get_performance(project_path)
get_performance(project_path, stat = "NSE")
get_performance(project_path, var = "WC")
get_performance(project_path, depth = 15)
get_performance(project_path, stat = "NSE", var = "WC")
get_performance(project_path, stat = "NSE", depth = 15)
get_performance(project_path,
stat = "NSE",
depth = 15,
var = "WC")
save_run(project_path, "hi45")
comparative_plot(project_path, variable = "WC", depth = 15)
plot_statistics(
project_path,
var = "WC",
stat = "PBIAS",
depth = c(15, 40, 70),
graph = "ggplot"
)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
parsed <- parse_swp_file(project_path, swap_file = "swap.swp")
parameters <- change_swap_par(param = parsed$parameters, name = "COFRED", value = 0.55)
write_swap_file(parameters = parameters, table_path = parsed$table_path, outpath = paste0(project_path, "/modified.swp"))
parsed <- parse_swp_file(project_path, "modified.swp")
run_swap(project_path, "modified.swp",verbose = T )
save_run(project_path, "frank5")
plot_statistics(
project_path,
var = "WC",
stat = "RMSE",
depth = c(15, 40, 70),
graph = "ggplot"
)
library(rswap)
pkgdown::build_site()
library(pkgdown)
library(rswap)
build_site()
library(rswap)
library(rswap)
buid_site
library(rswap)
buid_site()
pkgdown::build_site()
pkgdown::build_site()
library(rswap)
library(dplyr)
library(glue)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
swap_file = "swap.swp"
swap_exe = "C:/Users/mosh/Documents/rswap_local/swap.exe"
rswap::rswap_init(swap_exe)
run_swap(project_path, verbose = T)
projs <- list.files("C:/Users/mosh/Documents/rswap_local/", full.names = T)
projs<-projs[-(grepl(x=projs, ".exe") %>% which())]
sample(projs, 8)
for (project_path in sample(projs, 8)) {
status <- run_swap(project_path, verbose = T, autoset_output = T, quiet = T)
if(status != "100"){
stop("FAILED at", project_path)
}
}
for (project_path in sample(projs, 8)) {
status <- run_swap(project_path, verbose = T, autoset_output = T)
if(status != "100"){
stop("FAILED at", project_path)
}
}
project_path = "C:/Users/mosh/Documents/rswap_local/5salinitystress"
swap_file = "swap.swp"
swap_exe = "C:/Users/mosh/Documents/rswap_local/swap.exe"
rswap::rswap_init(swap_exe)
run_swap(project_path, verbose = T)
run_swap(project_path, verbose = T)
version <- packageVersion("rswap") %>% as.character() %>% enc2utf8()
# parse the various paths
rswap_dir <- project_path %>% paste0(.,"/rswap/")
swap_exe_name <- swap_exe %>% str_split("/") %>% unlist() %>% tail(n=1)
path_without_swap <-  swap_exe %>% str_remove(swap_exe_name)
swap_main_file_path <- rswap_dir %>% str_remove(path_without_swap)
rswap_dir
swap_exe_name
path_without_swap
path_without_swap
swap_main_file_path
# Update the SWINCO path if needed. If SWINCO is set to 3, then INIFIL needs
# to have its path updated.
# This code is ugly, and can be simplified, but it does work.
swinco_index <- (parameters$param == "SWINCO") %>% which()
swinco_index
parameters$value[swinco_index]
(parameters$param == "INIFIL") %>% which()
parameters$value[swinco_index]
swinco_index
parameters
View(parameters)
project_path
swap_exe
parse_result
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
parameters = parse_result$parameters
View(parameters)
# builds a directory for performing package actions, and returns the path
rswap_directory <- build_rswap_directory(project_path)
project_path
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
parameters = parse_result$parameters
View(parameters)
version <- packageVersion("rswap") %>% as.character() %>% enc2utf8()
# parse the various paths
rswap_dir <- project_path %>% paste0(.,"/rswap/")
swap_exe_name <- swap_exe %>% str_split("/") %>% unlist() %>% tail(n=1)
path_without_swap <-  swap_exe %>% str_remove(swap_exe_name)
swap_main_file_path <- rswap_dir %>% str_remove(path_without_swap)
swap_main_file_path
path_without_swap
swap_exe_name
rswap_dir
# SWCSV needs to be present in the SWAP main file, such that the needed
# output can be printed. If this parameter already exists within the
# parameter dataframe, we can simply adjust the value to 1. If it does
# not exist yet, we need to add it, with the value of 1.
if ("SWCSV" %in% parameters$param) {
parameters = change_swap_par(parameters, "SWCSV", "1")
} else{
rbind(parameters,
data.frame(
param = "SWCSV",
value = "1",
comment = glue("added by rswap v{version} @ {Sys.time()}")
))
}
# The exact same thing goes for SWCSV...
if ("SWCSV_TZ" %in% parameters$param) {
parameters = change_swap_par(parameters, "SWCSV_TZ", "1")
} else{
rbind(parameters,
data.frame(
param = "SWCSV_TZ",
value = "1",
comment = glue("added by rswap v{version} {Sys.time()}")
))
}
# these are the parameters that need a path to be updated
update_par <- c("PATHWORK","PATHATM", "PATHCROP", "PATHDRAIN")
for (par in update_par) {
val = glue("'{swap_main_file_path}'")
parameters = change_swap_par(parameters, par, val)
}
parameters
# Update the SWINCO path if needed. If SWINCO is set to 3, then INIFIL needs
# to have its path updated.
# This code is ugly, and can be simplified, but it does work.
swinco_index <- (parameters$param == "SWINCO") %>% which()
swinco_index
parameters$value[swinco_index]
infil_index <- (parameters$param == "INIFIL") %>% which()
infil_index
parameters$value[infil_index]
parameters$value[infil_index] %>% str_remove_all("'")
glue("'{swap_main_file_path}{val}' ! Changed by rswap v{version} @ {Sys.time()}")
swap_main_file_path
val
val <-  parameters$value[infil_index] %>% str_remove_all("'")
val
val <-  parameters$value[infil_index] %>% str_remove_all("'")
newval <- glue("'{swap_main_file_path}{val}' ! Changed by rswap v{version} @ {Sys.time()}")
newval
parameters = change_swap_par(parameters, "INIFIL", newval )
parameters
View(parameters)
View(parameters)
# builds a directory for performing package actions, and returns the path
rswap_directory <- build_rswap_directory(project_path)
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
# changes the paths in the swap main file to reflect the temporary location
params <-
update_swp_paths(
project_path = project_path,
swap_exe = swap_exe,
parameters = parse_result$parameters,
verbose =  verbose
)
View(params)
# load observed data
observed_path <- paste0(rswap_directory, "/rswap_observed_data.xlsx")
if(file.exists(observed_path) == FALSE){
warning("Observed file not found!\n",observed_path )
}
# routine for automatically setting output (could be improved)
# TODO move all of this to set_swap_output()
if (autoset_output) {
obs <- load_observed(rswap_directory)
variables <- obs$observed_variables
depths <- get_depths(data = obs$data) %>% sort()
# add the critical output params if they are not present.
if("INLIST_CSV" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV", value = "", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("SWCSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "SWCSV_TZ", value = "1", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("INLIST_CSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV_TZ ", value = "'WC,H,TEMP'", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}else{
params$value[which(params$param=="INLIST_CSV_TZ")] = "'WC,H,TEMP'"
}
# Set output wrapper function
params <- set_swap_output(params, variables, depths, verbose)
# print
if (verbose) {
cat(
"\n...autosetting SWAP output to match observed files\n")
}
}
params
View(params)
# change console output based on verbose flag
if (verbose) {
params <- change_swap_par(params, "SWSCRE", 2)
}else{
params <- change_swap_par(params, "SWSCRE", 0)
}
# location for where the swap file is to be written
# change this name to "rswap.swp"?
outpath <- paste0(rswap_directory, "/", swap_file)
# Write swap file
rswap_file <- write_swap_file(
parameters = params,
table_path = parse_result$table_path,
outpath = outpath,
verbose = verbose
)
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = swap_file_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
unlink(paste0(project_path, "/rswap"), recursive = T)
project_path = "C:/Users/mosh/Documents/rswap_local/5salinitystress"
swap_file = "swap.swp"
swap_exe = "C:/Users/mosh/Documents/rswap_local/swap.exe"
rswap::rswap_init(swap_exe)
project_path
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
parsed <- parse_swp_file(project_path, swap_file = "swap.swp")
parameters <- change_swap_par(param = parsed$parameters, name = "COFRED", value = 0.55)
write_swap_file(parameters = parameters, table_path = parsed$table_path, outpath = paste0(project_path, "/modified.swp"))
parsed <- parse_swp_file(project_path, "modified.swp")
run_swap(project_path, "modified.swp",verbose = T )
for (project_path in sample(projs, 8)) {
status <- run_swap(project_path, verbose = T, autoset_output = T)
if(status != "100"){
stop("FAILED at", project_path)
}
}
status <-
run_swap(
project_path = "C:/Users/mosh/Documents/rswap_local/hupselbrook",
verbose = T,
autoset_output = T,
quiet = T
)
status <-
run_swap(
project_path = "C:/Users/mosh/Documents/rswap_local/hupselbrook",
verbose = T,
autoset_output = T
)
modelled_data <- read_swap_output(project_path = project_path)
parse_swp_file(project_path, "swap.swp")
modelled_data$daily_output
modelled_data$custom_depth
observed_data <- load_observed(project_path)
observed_data$data
observed_data$observed_variables
get_depths(observed_data$data, variable = "WC")
plot_over_under(project_path,
variable = "WC",
depth = c(15, 40, 70))
soft_calibration_plot(project_path, vars = c("H", "WC", "DRAINAGE"))
run_swap(project_path, autoset_output = T)
project_path
project_path = "C:/Users/mosh/Documents/rswap_local/hupselbrook"
status <-
run_swap(
project_path = "C:/Users/mosh/Documents/rswap_local/hupselbrook",
verbose = T,
autoset_output = T
)
modelled_data <- read_swap_output(project_path = project_path)
parse_swp_file(project_path, "swap.swp")
modelled_data$daily_output
modelled_data$custom_depth
observed_data <- load_observed(project_path)
observed_data$data
observed_data$observed_variables
get_depths(observed_data$data, variable = "WC")
plot_over_under(project_path,
variable = "WC",
depth = c(15, 40, 70))
soft_calibration_plot(project_path, vars = c("H", "WC", "DRAINAGE"))
run_swap(project_path, autoset_output = T)
get_performance(project_path)
get_performance(project_path, stat = "NSE")
get_performance(project_path, var = "WC")
get_performance(project_path, depth = 15)
get_performance(project_path, stat = "NSE", var = "WC")
get_performance(project_path, stat = "NSE", depth = 15)
get_performance(project_path,
stat = "NSE",
depth = 15,
var = "WC")
save_run(project_path, "hi45")
comparative_plot(project_path, variable = "WC", depth = 15)
plot_statistics(
project_path,
var = "WC",
stat = "PBIAS",
depth = c(15, 40, 70),
graph = "ggplot"
)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
parsed <- parse_swp_file(project_path, swap_file = "swap.swp")
parameters <- change_swap_par(param = parsed$parameters, name = "COFRED", value = 0.55)
write_swap_file(parameters = parameters, table_path = parsed$table_path, outpath = paste0(project_path, "/modified.swp"))
parsed <- parse_swp_file(project_path, "modified.swp")
run_swap(project_path, "modified.swp",verbose = T )
save_run(project_path, "frank5")
plot_statistics(
project_path,
var = "WC",
stat = "RMSE",
depth = c(15, 40, 70),
graph = "ggplot"
)
pkgdown::build_site()
roxygen2::roxygenise()
library(rswap)
pkgdown::build_site()
pkgdown::build_site()
library(rswap)
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_citation()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_citation()
pkgdown::build_site()
pkgdown::build_site()
$stdout
.Last.error
library(rswap)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()4
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
