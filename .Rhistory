swap_exe
# update the swap main file with the new paths to the input files
file_path <- update_swp_paths(temp_directory, swap_file, swap_exe)
# parse the working directory from the given swap path
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
swap_path_split
swap_wd
# remove the working directory from the path of the swap main file
fixed_path <- file_path %>% str_remove(swap_wd)
fixed_path
swap_wd
fixed_path
# run the model
msg <- run( command = "swap.exe", wd = swap_wd, args = fixed_path,
error_on_status = F,
timeout = timeout,
echo_cmd = T,
echo = T
)
library(processx)
# run the model
msg <- run( command = "swap.exe", wd = swap_wd, args = fixed_path,
error_on_status = F,
timeout = timeout,
echo_cmd = T,
echo = T
)
timeout = 10
# run the model
msg <- run( command = "swap.exe", wd = swap_wd, args = fixed_path,
error_on_status = F,
timeout = timeout,
echo_cmd = T,
echo = T
)
msg$status
#' @param string name of the *.swp main file
#' @param verbose logical
#' @param timeout number of seconds before run timeout (optional, unlimited by default)
#'
#' @return returns name of run (change this!)
#'
#' @importFrom glue glue
#' @importFrom dyplr %>%
#' @export
#'
run_swap <- function(project_path, swap_exe, swap_file, verbose = T, timeout = Inf){
# create a temp directory to work in
temp_directory <- build_rswap_directory(project_path)
# update the swap main file with the new paths to the input files
file_path <- update_swp_paths(temp_directory, swap_file, swap_exe)
# parse the working directory from the given swap path
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
# remove the working directory from the path of the swap main file
fixed_path <- file_path %>% str_remove(swap_wd)
# run the model
msg <- run( command = "swap.exe", wd = swap_wd, args = fixed_path,
error_on_status = F,
timeout = timeout,
echo_cmd = T,
echo = T
)
# return status of run
return(msg$status)
}
run_swap(project_path, swap_exe, swap_file, verbose = T, timeout = 10)
status = run_swap(project_path, swap_exe, swap_file, verbose = T, timeout = 10)
status
msg
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
project_path
glue("{project_path}/rswap/")
from_path = glue("{project_path}/rswap/*")
glue("rswap_{Sys.time()")
run_name = glue("rswap_{Sys.time()}")
run_name
Sys.time() %>%  str_replace_all(":", "_")
Sys.time() %>%  str_replace_all(":", "_") %>% str_replace_all(" ","-")
tod = Sys.time() %>%  str_replace_all(":", "_") %>% str_replace_all(" ","-")
tad = Sys.time() %>%  str_replace_all(":", "_") %>% str_replace_all(" ","-")
tad = Sys.time() %>%  str_replace_all(":", "_") %>% str_replace_all(" ","-")
run_name = glue("rswap_{tad}")
run_name
tad = Sys.time() %>%  str_replace_all(":", "_") %>% str_replace_all(" ","at")
run_name = glue("rswap_{tad}")
run_name
project_path
save_location = glue("{project_path}/rswap_saved/")
save_location
save_location = glue("{project_path}/rswap_saved")
save_location
dir.create(save_location)
dir.create(save_location, showWarnings = F)
# create the save folder for the individual run
to_path = glue("{save_location}/run_name")
to_path
# create the save folder for the individual run
to_path = glue("{save_location}/{run_name}")
to_path
dir.create(to_path, showWarnings = T)
from_path
source("~/GitHub/rswap/R/functions.R")
swap_path = "C:/Users/mosh/Documents/swap.exe"
project_path = "C:/Users/mosh/Documents/tetves"
swap_exe = "C:/Users/mosh/Documents/swap.exe"
swap_file = "swap.swp"
temp_r = build_rswap_directory(project_path)
rswap_file = update_swp_paths(temp_directory = temp_r, swap_file = swap_file, swap_exe = swap_exe )
status = run_swap(project_path, swap_exe, swap_file, verbose = T, timeout = 10)
temp_r = build_rswap_directory(project_path)
rswap_file = update_swp_paths(temp_directory = temp_r, swap_file = swap_file, swap_exe = swap_exe )
status = run_swap(project_path, swap_exe, swap_file, verbose = T, timeout = 10)
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
#' @param project_path String, path to the project directory.
#' @param save_location String, path to directory where the model files are to
#' be saved. default is "project_directory"/rswap_saved_runs/
#' @param run_name name of run to be saved. default is "rswap_{time,date}"
#' @param verbose logical
#'#'
#' @importFrom glue glue
#' @importFrom dyplr %>%
#' @export
#'
save_run <- function(project_path, save_location = NULL, run_name = NULL, verbose = F){
if(run_name %>% is.null()){
tad = Sys.time() %>%  str_replace_all(":", "_") %>% str_replace_all(" ","at")
run_name = glue("rswap_{tad}")
}
if(save_location %>% is.null()){
save_location = glue("{project_path}/rswap_saved")
}
# create the save folder of ALL the saves
dir.create(save_location, showWarnings = F)
# create the save folder for the individual run
to_path = glue("{save_location}/{run_name}")
dir.create(to_path, showWarnings = T)
from_path = glue("{project_path}/rswap/*")
file.copy(from = from_path, to = to_path)
}
save_run(project_path, save_location = NULL, run_name = NULL)
from_path
to_path
list.files(from_path)
from_path
from_path = glue("{project_path}/rswap/")
list.files(from_path)
to_copy = list.files(from_path)
file.copy(from = to_copy, to = to_path)
to_copy %>% file.copy(from = ., to = to_path)
to_copy
to_path
to_copy = list.files(from_path, full.names = T)
to_copy
from_copy = list.files(from_path, full.names = T)
from_copy
from_copy = list.files(from_path)
from_copy
from_copy = list.files(from_path, full.names = T)
to_path
source("~/GitHub/rswap/R/functions.R")
to_copy = glue("{to_path}/{list.files(from_path)})
to_copy %>% file.copy(from = ., to = to_path,)
}
# to be transformed to package form:
# this function archives the current model setup, so that you can revert back
# to it on a later date.
archive_run <- function(run_name){
# path where it will be saved
dirpath = paste0(field,"/archive/",run_name)
# archives work and deletes saved log files
dir.create(dirpath, showWarnings = F)
dir.create(paste0(dirpath, "/log"), showWarnings = F)
dir.create(paste0(dirpath,"/work"), showWarnings = F)
source("~/GitHub/rswap/R/functions.R")
to_copy = glue("{to_path}/{list.files(from_path)}")
from_copy
to_copy
file.copy(from_crop, to_copy)
file.copy(from_copy, to_copy)
warnings()
if(run_name %>% is.null()){
tad = Sys.time() %>%  str_replace_all(":", "_") %>% str_replace_all(" ","at")
run_name = glue("rswap_{tad}")
}
if(save_location %>% is.null()){
save_location = glue("{project_path}/rswap_saved")
}
# create the save folder of ALL the saves
dir.create(save_location, showWarnings = F)
# create the save folder for the individual run
to_path = glue("{save_location}/{run_name}")
dir.create(to_path, showWarnings = T)
from_path = glue("{project_path}/rswap/")
from_copy = list.files(from_path, full.names = T)
to_copy = glue("{to_path}/{list.files(from_path)}")
file.copy(from_copy, to_copy)
file.copy(from_copy, to_copy)
source("~/GitHub/rswap/R/functions.R")
from_copy
to_copy
status = file.copy(from_copy, to_copy)
status
any(status)
any(status ==FALSE)
cat("some files were not copied\n")
source("~/GitHub/rswap/R/functions.R")
to_path
cat(to_path,"\n")
cat("all files succesfully copied to:\n")
cat(to_path,"\n")
status
to_copy
cat(to_copy[which(status == FALSE)])
cat(to_copy[which(status == FALSE)], sep = "\n")
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
swap_path = "C:/Users/mosh/Documents/swap.exe"
project_path = "C:/Users/mosh/Documents/tetves"
swap_exe = "C:/Users/mosh/Documents/swap.exe"
swap_file = "swap.swp"
temp_r = build_rswap_directory(project_path)
rswap_file = update_swp_paths(temp_directory = temp_r, swap_file = swap_file, swap_exe = swap_exe )
status = run_swap(project_path, swap_exe, swap_file, verbose = T, timeout = 10)
save_run(project_path, save_location = NULL, run_name = NULL)
source("~/GitHub/rswap/R/functions.R")
temp_r = build_rswap_directory(project_path)
rswap_file = update_swp_paths(temp_directory = temp_r, swap_file = swap_file, swap_exe = swap_exe )
status = run_swap(project_path, swap_exe, swap_file, verbose = T, timeout = 10)
save_run(project_path, save_location = NULL, run_name = NULL)
swap_path = "C:/Users/mosh/Documents/swap.exe"
project_path = "C:/Users/mosh/Documents/tetves"
swap_exe = "C:/Users/mosh/Documents/swap.exe"
swap_file = "swap.swp"
temp_r = build_rswap_directory(project_path)
rswap_file = update_swp_paths(temp_directory = temp_r, swap_file = swap_file, swap_exe = swap_exe )
status = run_swap(project_path, swap_exe, swap_file, verbose = T, timeout = 10)
save_run(project_path, save_location = NULL, run_name = NULL)
save_run(project_path, save_location = "C:/Users/mosh/Documents/tetves/rswap_saved/", run_name = NULL)
save_run(project_path, save_location = "C:/Users/mosh/Documents/tetves/rswap_saved/", run_name = "test")
save_run(project_path, save_location = "C:/Users/mosh/Documents/tetves/rswap_saved", run_name = "test")
save_run(project_path, save_location = "C:/Users/mosh/Documents/tetves/rswap_saved", run_name = "test")
save_run(project_path, save_location = "C:/Users/mosh/Documents/tetves/rswap_saved", run_name = "tes3t")
library(rswap)
# use swapr
library(tidyverse)
library(glue)
swap_path = "C:/Users/mosh/Documents/swap.exe"
project_path = "C:/Users/mosh/Documents/tetves"
swap_exe = "C:/Users/mosh/Documents/swap.exe"
swap_file = "swap.swp"
library(rswap)
temp_r = build_rswap_directory(project_path)
library(rswap)
project_path = "C:/Users/mosh/Documents/tetves"
swap_exe = "C:/Users/mosh/Documents/swap.exe"
swap_file = "swap.swp"
temp_r = build_rswap_directory(project_path)
source("~/GitHub/rswap/R/functions.R")
status = run_swap(project_path, swap_exe, swap_file, verbose = T, timeout = 10)
status = run_swap(project_path, swap_exe, swap_file, verbose = F, timeout = 10)
source("~/GitHub/rswap/R/functions.R")
library(rswap)
status = run_swap(project_path, swap_exe, swap_file, verbose = F, timeout = 10)
save_run(project_path)
source("~/GitHub/rswap/R/functions.R")
status = rswap::run_swap(project_path, swap_exe, swap_file, verbose = F, timeout = 10)
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
library(readxl)
?readxl
observed = "C:/Users/mosh/Documents/tetves/observed_data.xlsx"
observed = "C:/Users/mosh/Documents/tetves/observed_data.xlsx"
read_excel(observed)
data <- read_excel(path)
data <- read_excel(path)
path = observed
data <- read_excel(path)
column <- colnames(data)
column
columns <- colnames(data)
data <- read_excel(path)
columns <- colnames(data)
columns
columns %>% filter(!grepl("DATE"))
columns %>% filter(!grepl(.,"DATE"))
columns %>% filter(!grepl(x = .,"DATE"))
columns %>% filter(!grepl(x = ."DATE"))
columns %>% grepl(x = ., "DATE"))
}
columns %>% grepl(x = ., "DATE")
columns %>% select(grepl(x = ., "DATE"))
columns %>% grepl(x = ., "DATE")
columns %>% !grepl(x = ., "DATE")
columns %>% grepl(x = ., "DATE")
date_col <- columns %>% grepl(x = ., "DATE")
date_col
source("~/GitHub/rswap/R/functions.R")
columns
date_col
date_col
# find a better way to do this.
date_col <- columns %>% grepl(x = ., "DATE") %>% which()
date_col
columns %>% select(-date_col)
columns[-date_col]
columns[-date_col] %>%  grepl(x = ., "obs*")
obs_cols <- columns[-date_col] %>%  grepl(x = ., "obs*")
obs_cols <- columns %>%  grepl(x = ., "obs*")
columns
obs_cols <- columns %>%  grepl(x = ., "obs*")
obs_cols
columns[obs_cols]
columns[obs_cols] %>% str_remove("obs")
columns[obs_cols] %>% str_remove("obs") %>% str_split("_")
columns[obs_cols] %>% str_remove("obs") %>% str_split("_") %>% unlist()
columns[obs_cols] %>% str_remove("obs") %>% str_split("_") %>% unlist() %>% as.numeric()
obs_cols <- columns %>%  grepl(x = ., "obs*")
obs_cols
columns[obs_cols] %>% str_remove("obs")
columns[obs_cols] %>% str_remove("obs") %>% str_split("_")
columns[obs_cols] %>% str_remove("obs") %>% str_split("_") %>% unlist()
col_sep <- columns[obs_cols] %>% str_remove("obs") %>% str_split("_") %>% unlist()
col_sep %>% is.numeric()
col_sep %>% as.numeric()
col_sep %>% as.numeric() %>% is.na()
col_sep %>% as.numeric() %>% is.na() %>% which()
obs_cols
col_sep
col_sep
col_sep
num_index <- col_sep %>% as.numeric() %>% is.na() %>% which()
num_index <- col_sep %>% as.numeric() %>% is.na() %>% which() %>% suppressWarnings()
num_index
obs_vars <- col_sep[-num_index]
obs_vars
obs_vars <- col_sep[num_index]
obs_vars
obs_vars <- col_sep[num_index] %>% unique()
obs_vars
col_sep %>% as.numeric()
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
source("~/GitHub/rswap/R/functions.R")
library(rswap)
devtools::document()
rm(list = c("run_swap"))
devtools::document()
rm(list = c("load_observed", "save_run"))
devtools::document()
source("~/GitHub/rswap/R/functions.R")
devtools::document()
rm(list = c("load_observed", "run_swap", "save_run"))
devtools::document()
source("~/GitHub/rswap/R/functions.R")
devtools::document()
rm(list = c("load_observed", "run_swap", "save_run"))
devtools::document()
library(rswap)
project_path = "C:/Users/mosh/Documents/tetves"
swap_exe = "C:/Users/mosh/Documents/swap.exe"
swap_file = "swap.swp"
observed = "C:/Users/mosh/Documents/tetves/observed_data.xlsx"
status = rswap::run_swap(project_path, swap_exe, swap_file, verbose = T, timeout = 10)
observed_file <- rswap::load_observed(path = observed)
observed_file
observed_file <- rswap::load_observed(path = observed) %>% tibble()
observed_file
cat("observed data loaded, following variables detected:", sep = "\n")
cat(obs_vars, sep = "\n")
cat(obs_vars, sep = " ")
cat(obs_vars, "\n", sep = " ")
cat("observed data loaded, following variables detected:", sep = "\n")
cat(obs_vars, "\n", sep = " ")
library(rswap)
observed_file <- rswap::load_observed(path = observed, verbose = T) %>% tibble()
project_path
file.info(project_path)
project_path = "C:/Users/mosh/Documents/tetves"
project_path
glue("{project_path}/rswap/")
# this is the default path.
load_path = glue("{project_path}/rswap/rswap_saved")
load_path
file.info(load_path)
# this is the default path.
load_path = glue("{project_path}/rswap/rswap_saved/")
file.info(load_path)
# this is the default path.
load_path = glue("{project_path}/rswap_saved/")
file.info(load_path)
file_info = file.info(load_path)
file_info
file_info$mtime
load_path
# this is the default path.
load_path = glue("{project_path}/rswap_saved")
file_info = file.info(load_path)
file_info$mtime
load_path
file_info = dir.info(load_path)
file_info = file.info(load_path)
file_info
file_info = file.info(load_path)
file_info
file_info = file.info(list.files(load_path))
file_info
list.files(load_path)
list.files(load_path)
list.files(load_path)[1]
list.files(load_path)[1]
load_path
list.files(load_path)[1]
list.files(load_path)[1]
load_path
list.files(load_path)
list.files(load_path)
file_info = file.info(list.files(load_path))
file_info$mtime
file_info
file_info = file.info(list.files(load_path))
cat("not implemented yet", sep = "\n")
project_path
read_path <-  glue("{project_path}/rswap/")
read_path
glue("{project_path}/rswap/")
glue("{project_path}/rswap/")
glue("{project_path}/rswap/")
"hello"+"world"
custom_output <- glue("{read_path}/result_output.csv")
custom_output
read_path <-  glue("{project_path}/rswap")
read.table(glue("{read_path}/result_output.csv"))
read.table(glue("{read_path}/result_output.csv"), quote = "*")
read.table(glue("{read_path}/result_output.csv"), quote = "*", sep = ",")
glue("{read_path}/result_output.csv")
read.csv(glue("{read_path}/result_output.csv"), quote = "*", sep = ",")
read.csv(glue("{read_path}/result_output.csv"), quote = "*", sep = ",", dec = ".")
read.table(glue("{read_path}/result_output.csv"), quote = "*", sep = ",", dec = ".")
read.table(glue("{read_path}/result_output.csv"), comment.char =  = "*", sep = ",", dec = ".")
read.table(glue("{read_path}/result_output.csv"), comment.char = "*", sep = ",", dec = ".")
read.table(glue("{read_path}/result_output.csv"), comment.char = "*", sep = ",", dec = ".") %>% tibble()
read.table(glue("{read_path}/result_output.csv"), comment.char = "*", sep = ",", dec = ".", col.names = T) %>% tibble()
read.table(glue("{read_path}/result_output.csv"), comment.char = "*", sep = ",", dec = ".", header = T) %>% tibble()
test = read.table(
glue("{read_path}/result_output.csv"),
comment.char = "*",
sep = ",",
dec = ".",
header = T
) %>% tibble()
View(test)
result_output <- read.table(
glue("{read_path}/result_output.csv"),
comment.char = "*",
sep = ",",
dec = ".",
header = T
) %>% tibble()
result_output %>% colnames()
result_output %>% colnames() %>% str_replace("..", "_")
result_output %>% colnames() %>% str_replace("\.", "_")
result_output %>% colnames() %>% str_replace("z\.", "_")
result_output %>% colnames() %>% str_replace("\\.", "_")
result_output %>% colnames() %>% str_replace("\\..", "_")
result_output %>% colnames() %>% str_replace("\\..", "_") %>% str_remove("\\.", )
result_output %>% colnames() %>% str_replace("\\..", "_") %>% str_remove("\\.")
new_cols <- result_output %>% colnames() %>% str_replace("\\..", "_") %>% str_remove("\\.")
colnames(result_output) <- new_cols
View(result_output)
result_output <- read.table(
glue("{read_path}/result_output_tz.csv"),
comment.char = "*",
sep = ",",
dec = ".",
header = T
) %>% tibble()
result_daily <- read.table(
glue("{read_path}/result_output_tz.csv"),
comment.char = "*",
sep = ",",
dec = ".",
header = T
) %>% tibble()
View(result_daily)
r_frame <- data.frame(result_daily, result_output)
r_frame
r_frame <- data.frame(result_daily, result_output)
r_frame <- data.frame(daily = result_daily, custom_depth = result_output)
r_frame <- list(daily = result_daily, custom_depth = result_output, )
r_frame <- list(daily = result_daily, custom_depth = result_output)
r_frame
library(rswap)
devtools::document()
library(rswap)
library(rswap)
rswap::read_swap_output(project_path)
project_path = "C:/Users/mosh/Documents/tetves"
swap_exe = "C:/Users/mosh/Documents/swap.exe"
swap_file = "swap.swp"
observed = "C:/Users/mosh/Documents/tetves/observed_data.xlsx"
rswap::read_swap_output(project_path)
?rswap
