# return the path to the temp directory
return(temp_directory)
}
#' Makes a temporary sub-directory workspace for the package to run in.
#' @param project_path string, path to project directory
#'
#' @importFrom glue glue
#' @importFrom dyplr %>%
#'
#' @keywords internal
#'
build_rswap_directory <- function(project_path){
temp_directory <- glue("{project_path}/.rswap/")
# create the hidden temp directory
dir.create(temp_directory, showWarnings = F)
# list all the files in the original project directory
#TODO might want to check the options here, so you get ALL the files and none more
file_list <- list.files(project_path, full.names = T, recursive = T)
# vector of all the files i want to copy over
#TODO might want to think of a better solution than "observed_data.xslx someday
file_types <- c("*.crp", "*.met", "*.swp", "*.dra", "layer*n.csv", "observed_data.xlsx")
match_string <- paste(file_types, collapse = "|")
# find out the index of the required files and copy only those over to the temp directory
required_files <- file_list %>% grepl(x = ., match_string) %>% which()
required_file_list <- file_list[required_files]
status <- file.copy(from = required_file_list, to = temp_directory)
# legacy support for old met files:
# copies over any files with a "numeric" file type. (best way i could think of)
not_numeric <- str_split(file_list, "[.]", simplify = T)[,2] %>% as.numeric() %>% is.na() %>% suppressWarnings()
met_files <- file_list[which(not_numeric == FALSE)]
met_status <- file.copy(from = met_files, to = temp_directory)
# return the path to the temp directory
return(temp_directory)
}
build_rswap_directory(project_path)
temp_directory <- build_rswap_directory(project_directory)
temp_directory <- build_rswap_directory(project_path)
temp_directory
swap_path
# parse the command to run swap
command = glue("{swap_path} {temp_directory}swap_file")
command
# parse the command to run swap
command = glue("{swap_path} {temp_directory}{swap_file}")
swap_file = "swap.swp"
# parse the command to run swap
command = glue("{swap_path} {temp_directory}{swap_file}")
command
# execute command and store the status in variable "code"
code = system(
command,
show.output.on.console = verbose,
intern = T,
timeout = timeout, invisible = F, minimized = F
)
verbose = T
# execute command and store the status in variable "code"
code = system(
command,
show.output.on.console = verbose,
intern = T,
timeout = timeout, invisible = F, minimized = F
)
timeout = 0
# execute command and store the status in variable "code"
code = system(
command,
show.output.on.console = verbose,
intern = T,
timeout = timeout, invisible = F, minimized = F
)
temp_directory
swap_file
temp_directory
swap_file <- read_lines(glue("{temp_directory}/{swap_file}"))
swap_file
swap_file
swap_file %>% grepl(., "PROJECT", fixed = T)
swap_file %>% grepl(x=., "PROJECT", fixed = T)
swap_file %>% grepl(x=., "PROJECT", fixed = T) %>% which()
project_line = swap_file %>% grepl(x=., "PROJECT", fixed = T)
project_line
project_line = swap_file %>% grepl(x=., "PROJECT", fixed = T) %>% which()
project_line = swap_file %>% grepl(x=., "PROJECT", fixed = T) %>% which()
pathwork_line = swap_file %>% grepl(x=., "PATHWORK", fixed = T) %>% which()
pathatm_line = swap_file %>% grepl(x=., "PATHATM", fixed = T) %>% which()
pathcrop_line = swap_file %>% grepl(x=., "PATHCROP", fixed = T) %>% which()
pathdrain_line = swap_file %>% grepl(x=., "PATHDRAIN", fixed = T) %>% which()
swap_file[project_line]
project_name = swap_file[project_line] %>% str_split(''')
}
#' Runs the SWAP model
swap_file[project_line]
swap_file[pathwork_line]
temp_directory
dir.create(glue("{temp_directory}/work"))
glue("PATHWORK  = '{tempdirectory}/work'       ! Path to work folder [A80]")
glue("PATHWORK  = '{temp_directory}/work'       ! Path to work folder [A80]")
Sys.time()
swap_file[pathwork_line] <- glue("PATHWORK  = '{temp_directory}/work' ! written by rswap {Sys.time()}")
swap_file[pathwork_line]
swap_file <- read_lines(glue("{temp_directory}/{swap_file}"))
swap_file_new <- swap_file
swap_file <- read_lines(glue("{temp_directory}/{swap_file}"))
swap_file_new <- swap_file
project_line = swap_file %>% grepl(x=., "PROJECT", fixed = T) %>% which()
pathwork_line = swap_file %>% grepl(x=., "PATHWORK", fixed = T) %>% which()
pathatm_line = swap_file %>% grepl(x=., "PATHATM", fixed = T) %>% which()
pathcrop_line = swap_file %>% grepl(x=., "PATHCROP", fixed = T) %>% which()
pathdrain_line = swap_file %>% grepl(x=., "PATHDRAIN", fixed = T) %>% which()
dir.create(glue("{temp_directory}/work"))
dir.create(glue("{temp_directory}/work"), showWarnings = F)
swap_file_new[pathwork_line] <- glue("PATHWORK  = '{temp_directory}/work' ! written by rswap {Sys.time()}")
swap_file_new[pathwork_line]
dir.create(glue("{temp_directory}work"), showWarnings = F)
dir.create(glue("{temp_directory}work"), showWarnings = F)
swap_file_new[pathwork_line] <- glue("PATHWORK  = '{temp_directory}work' ! written by rswap {Sys.time()}")
swap_file_new[pathwork_line] <- glue("PATHWORK  = '{temp_directory}work' ! changed by rswap {Sys.time()}")
swap_file_new
swap_file_new[pathwork_line]
swap_file_new[pathatm_line] <- glue("PATHATM   = '{temp_directory}meteo/'       ! changed by rswap {Sys.time()}")
swap_file_new[pathatm_line]
swap_file_new[pathwork_line] <- glue("PATHWORK  = '{temp_directory}work/' ! changed by rswap {Sys.time()}")
swap_file_new[pathatm_line] <- glue("PATHATM   = '{temp_directory}' ! changed by rswap {Sys.time()}")
swap_file_new[pathcrop_line] <- glue("PATHCROP   = '{temp_directory}' ! changed by rswap {Sys.time()}")
swap_file_new[pathdrain_line] <- glue("PATHDRAIN   = '{temp_directory}' ! changed by rswap {Sys.time()}")
swap_file_new
dir.create(glue("{temp_directory}work"), showWarnings = F)
swap_file_new[pathwork_line] <- glue("  PATHWORK  = '{temp_directory}work/' ! changed by rswap {Sys.time()}")
swap_file_new[pathatm_line] <- glue("  PATHATM   = '{temp_directory}' ! changed by rswap {Sys.time()}")
swap_file_new[pathcrop_line] <- glue("  PATHCROP   = '{temp_directory}' ! changed by rswap {Sys.time()}")
swap_file_new[pathdrain_line] <- glue(  "PATHDRAIN   = '{temp_directory}' ! changed by rswap {Sys.time()}")
swap_file_new
swap_file_new[pathwork_line] <- glue("  PATHWORK  = '{temp_directory}work/' ! changed by rswap {Sys.time()}")
swap_file_new[pathatm_line] <- glue("  PATHATM   = '{temp_directory}' ! changed by rswap {Sys.time()}")
swap_file_new[pathcrop_line] <- glue("  PATHCROP   = '{temp_directory}' ! changed by rswap {Sys.time()}")
swap_file_new[pathdrain_line] <- glue("  PATHDRAIN   = '{temp_directory}' ! changed by rswap {Sys.time()}")
glue("{temp_directory}rswap_{swap_file}")
glue("{temp_directory}rswap_{swap_file}")
swap_file = "swap.swp"
glue("{temp_directory}rswap_{swap_file}")
writeLines(text = swap_file_new, con = glue("{temp_directory}rswap_{swap_file}"))
dir.create(glue("{temp_directory}work"), showWarnings = F)
swap_file_new[pathwork_line] <-  glue("  PATHWORK  = '{temp_directory}work/' ! changed by rswap {Sys.time()}")
swap_file_new[pathatm_line] <-   glue("  PATHATM   = '{temp_directory}'      ! changed by rswap {Sys.time()}")
swap_file_new[pathcrop_line] <-  glue("  PATHCROP  = '{temp_directory}'      ! changed by rswap {Sys.time()}")
swap_file_new[pathdrain_line] <- glue("  PATHDRAIN = '{temp_directory}'      ! changed by rswap {Sys.time()}")
writeLines(text = swap_file_new, con = glue("{temp_directory}rswap_{swap_file}"))
#' updates the filepaths in the swap main file
#' @param temp_directory path to the temp directory
#' @param swap_file name of the swap file to be modified
#' @importFrom glue glue
#' @importFrom dplyr %>%
#' @keywords internal
update_swp_paths <- function(temp_directory, swap_file){
swap_file_lines <- read_lines(glue("{temp_directory}/{swap_file}"))
swap_file_new <- swap_file_lines
project_line = swap_file_lines %>% grepl(x=., "PROJECT", fixed = T) %>% which()
pathwork_line = swap_file_lines %>% grepl(x=., "PATHWORK", fixed = T) %>% which()
pathatm_line = swap_file_lines %>% grepl(x=., "PATHATM", fixed = T) %>% which()
pathcrop_line = swap_file_lines %>% grepl(x=., "PATHCROP", fixed = T) %>% which()
pathdrain_line = swap_file_lines %>% grepl(x=., "PATHDRAIN", fixed = T) %>% which()
dir.create(glue("{temp_directory}work"), showWarnings = F)
swap_file_new[pathwork_line] <-  glue("  PATHWORK  = '{temp_directory}work/' ! changed by rswap {Sys.time()}")
swap_file_new[pathatm_line] <-   glue("  PATHATM   = '{temp_directory}'      ! changed by rswap {Sys.time()}")
swap_file_new[pathcrop_line] <-  glue("  PATHCROP  = '{temp_directory}'      ! changed by rswap {Sys.time()}")
swap_file_new[pathdrain_line] <- glue("  PATHDRAIN = '{temp_directory}'      ! changed by rswap {Sys.time()}")
new_swap_file_name = glue("{temp_directory}rswap_{swap_file}")
writeLines(text = swap_file_new, con = new_swap_file_name )
return(new_swap_file_name)
}
rswap_file <- update_swp_paths(temp_directory, swap_file)
rswap_file
# parse the command to run swap
command = glue("{swap_path} {rswap_file}")
command
# execute command and store the status in variable "code"
code = system(
command,
show.output.on.console = verbose,
intern = T,
timeout = timeout, invisible = F, minimized = F
)
# execute command and store the status in variable "code"
code = system(
command,
timeout = timeout,
)
code
command
project_path
rswap_file
rswap_file <- update_swp_paths(temp_directory, swap_file)
# parse the command to run swap
command = glue("{swap_path} {project_path}/.rswap/rswap_{swap_file}")
file_path <- update_swp_paths(temp_directory, swap_file)
# parse the command to run swap
command = glue("{swap_path} {project_path}/.rswap/rswap_{swap_file}")
command
project_path
# execute command and store the status in variable "code"
code = system(
command,
timeout = timeout,
)
command
# create the hidden temp directory
dir.create(temp_directory, showWarnings = F, mode = "0777")
temp_directory <- build_rswap_directory(project_path)
#' Makes a temporary sub-directory workspace for the package to run in.
#' @param project_path string, path to project directory
#'
#' @importFrom glue glue
#' @importFrom dyplr %>%
#'
#' @keywords internal
#'
build_rswap_directory <- function(project_path){
temp_directory <- glue("{project_path}/.rswap/")
# create the hidden temp directory
dir.create(temp_directory, showWarnings = F, mode = "0777")
# list all the files in the original project directory
#TODO might want to check the options here, so you get ALL the files and none more
file_list <- list.files(project_path, full.names = T, recursive = T)
# vector of all the files i want to copy over
#TODO might want to think of a better solution than "observed_data.xslx someday
file_types <- c("*.crp", "*.met", "*.swp", "*.dra", "layer*n.csv", "observed_data.xlsx")
match_string <- paste(file_types, collapse = "|")
# find out the index of the required files and copy only those over to the temp directory
required_files <- file_list %>% grepl(x = ., match_string) %>% which()
required_file_list <- file_list[required_files]
status <- file.copy(from = required_file_list, to = temp_directory)
# legacy support for old met files:
# copies over any files with a "numeric" file type. (best way i could think of)
not_numeric <- str_split(file_list, "[.]", simplify = T)[,2] %>% as.numeric() %>% is.na() %>% suppressWarnings()
met_files <- file_list[which(not_numeric == FALSE)]
met_status <- file.copy(from = met_files, to = temp_directory)
# return the path to the temp directory
return(temp_directory)
}
#' updates the filepaths in the swap main file
#' @param temp_directory path to the temp directory
#' @param swap_file name of the swap file to be modified
#' @importFrom glue glue
#' @importFrom dplyr %>%
#' @keywords internal
update_swp_paths <- function(temp_directory, swap_file){
swap_file_lines <- read_lines(glue("{temp_directory}/{swap_file}"))
swap_file_new <- swap_file_lines
project_line = swap_file_lines %>% grepl(x=., "PROJECT", fixed = T) %>% which()
pathwork_line = swap_file_lines %>% grepl(x=., "PATHWORK", fixed = T) %>% which()
pathatm_line = swap_file_lines %>% grepl(x=., "PATHATM", fixed = T) %>% which()
pathcrop_line = swap_file_lines %>% grepl(x=., "PATHCROP", fixed = T) %>% which()
pathdrain_line = swap_file_lines %>% grepl(x=., "PATHDRAIN", fixed = T) %>% which()
dir.create(glue("{temp_directory}work"), showWarnings = F)
swap_file_new[pathwork_line] <-  glue("  PATHWORK  = '{temp_directory}work/' ! changed by rswap {Sys.time()}")
swap_file_new[pathatm_line] <-   glue("  PATHATM   = '{temp_directory}'      ! changed by rswap {Sys.time()}")
swap_file_new[pathcrop_line] <-  glue("  PATHCROP  = '{temp_directory}'      ! changed by rswap {Sys.time()}")
swap_file_new[pathdrain_line] <- glue("  PATHDRAIN = '{temp_directory}'      ! changed by rswap {Sys.time()}")
new_swap_file_name = glue("{temp_directory}rswap_{swap_file}")
writeLines(text = swap_file_new, con = new_swap_file_name )
return(new_swap_file_name)
}
swap_path = "C:/Users/mosh/Documents/swap.exe"
project_path = "C:/Users/mosh/Documents/tetves"
temp_directory <- build_rswap_directory(project_path)
library(glue)
library(tidyverse)
temp_directory <- build_rswap_directory(project_path)
file_path <- update_swp_paths(temp_directory, swap_file)
swap_file
swap_file = "swap.swp"
file_path <- update_swp_paths(temp_directory, swap_file)
file_path
# parse the command to run swap
command = glue("{swap_path} {project_path}/.rswap/rswap_{swap_file}")
# execute command and store the status in variable "code"
code = system(
command,
timeout = timeout,
)
# execute command and store the status in variable "code"
code = system(command)
command
swap_path = "C:/Users/mosh/Documents/swap.exe"
project_path = "C:/Users/mosh/Documents/tetves"
swap_file = "swap.swp"
source("~/GitHub/rswap/R/functions.R")
# use swapr
library(tidyverse)
library(glue)
swap_path = "C:/Users/mosh/Documents/swap.exe"
project_path = "C:/Users/mosh/Documents/tetves"
swap_file = "swap.swp"
source("~/GitHub/rswap/R/functions.R")
temp_directory <- build_rswap_directory(project_path)
file_path <- update_swp_paths(temp_directory, swap_file)
# parse the command to run swap
command = glue("{swap_path} {project_path}/.rswap/rswap_{swap_file}")
command
getwd()
# execute command and store the status in variable "code"
code = system(command)
swap_path %>% str_split("swap.exe")
swap_path %>% str_split("swap.exe", simplify = T)
swap_path = swap_path %>% str_split("swap.exe", simplify = T)
wd <- swap_path[,2]
wd
wd <- swap_path[,1]
wd
swap_wd <- swap_path[,1]
# parse the command to run swap
command = glue("{swap_path} {project_path}/.rswap/rswap_{swap_file}")
command
file_path
fixed_path <- file_path %>% str_remove(swap_wd)
fixed_path
# parse the command to run swap
command = glue("{swap_path} {fixed_path}")
command
fixed_path
swap_path
# parse the command to run swap
command = glue("{swap_path} {fixed_path}")
command
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
fixed_path <- file_path %>% str_remove(swap_wd)
file_path
swap_wd
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_path_split
swap_wd <- swap_path_split[,1]
swap_wd
swap_path
swap_path = "C:/Users/mosh/Documents/swap.exe"
project_path = "C:/Users/mosh/Documents/tetves"
swap_file = "swap.swp"
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
fixed_path <- file_path %>% str_remove(swap_wd)
# parse the command to run swap
command = glue("{swap_path} {fixed_path}")
command
# execute command and store the status in variable "code"
code = system(command)
command
swap_path = "C:/Users/mosh/Documents/tetves/swap.exe"
project_path = "C:/Users/mosh/Documents/tetves"
swap_file = "swap.swp"
temp_directory <- build_rswap_directory(project_path)
file_path <- update_swp_paths(temp_directory, swap_file)
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
fixed_path <- file_path %>% str_remove(swap_wd)
# parse the command to run swap
command = glue("{swap_path} {fixed_path}")
command
# execute command and store the status in variable "code"
code = system(command)
# execute command and store the status in variable "code"
code = system(command)
source("~/GitHub/rswap/R/functions.R")
temp_directory <- build_rswap_directory(project_path)
file_path <- update_swp_paths(temp_directory, swap_file)
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
fixed_path <- file_path %>% str_remove(swap_wd)
# parse the command to run swap
command = glue("{swap_path} {fixed_path}")
command
# execute command and store the status in variable "code"
code = system(command)
code = system(command)
source("~/GitHub/rswap/R/functions.R", echo=TRUE)
command
getwd()
library(processx)
command
msg <- run(command = command, wd = swap_wd,
error_on_status = FALSE)
fixed_path
swap_wd
fixed_path <- file_path %>% str_remove(swap_wd)
# parse the command to run swap
command = glue("swap.exe {fixed_path}")
command
swap_wd
msg <- run(command = command, wd = swap_wd,
error_on_status = FALSE)
msg <- run(command = command, wd = swap_wd,
error_on_status = T)
msg <- run(command = command, wd = swap_wd)
msg
msg <- run(command = "swap.exe", wd = swap_wd, args = "rswap/rswap_swap.swp")
msg <- run(command = "swap.exe", wd = swap_wd, args = "rswap/rswap_swap.swp", error_on_status = F)
msg
msg <- run(command = "swap.exe", wd = swap_wd, args = ".rswap/rswap_swap.swp", error_on_status = F)
msg$status
msg <- run(command = "swap.exe", wd = swap_wd, args = ".rswap/rswap_swap.swp", error_on_status = F)
msg$status
msg <- run(command = "swap.exe", wd = swap_wd, args = ".rswap/rswap_swap.swp", error_on_status = T)
msg$stdout
msg$stdout %>% print()
source("~/GitHub/rswap/R/functions.R", echo=TRUE)
temp_directory <- build_rswap_directory(project_path)
file_path <- update_swp_paths(temp_directory, swap_file)
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
fixed_path <- file_path %>% str_remove(swap_wd)
# parse the command to run swap
command = glue("swap.exe {fixed_path}")
msg <- run(command = "swap.exe", wd = swap_wd, args = ".rswap/rswap_swap.swp", error_on_status = T)
msg$stdout %>% print()
msg <- run(command = "swap.exe", wd = swap_wd, args = ".rswap/rswap_swap.swp", error_on_status = T)
msg$status %>% print()
msg <- run(command = "swap.exe", wd = swap_wd, args = ".rswap/rswap_swap.swp", error_on_status = T)
msg <- run(command = "swap.exe", wd = swap_wd, args = ".rswap/rswap_swap.swp", error_on_status = T)
msg$stderr %>% print()
msg$stderr %>% cat()
msg$status %>% cat()
msg$stderr %>% cat()
msg$stdout %>% cat()
msg <- run(command = "swap.exe", wd = swap_wd, args = ".rswap/rswap_swap.swp", error_on_status = T)
msg$stdout %>% cat()
msg <- run(command = "swap.exe", wd = swap_wd, args = ".rswap/rswap_swap.swp", error_on_status = T)
msg$stdout %>% cat()
swap_wd
msg <- run(command = "swap.exe", wd = swap_wd, args = "/.rswap/rswap_swap.swp", error_on_status = T)
swap_wd
msg <- run(command = "swap.exe", wd = swap_wd, args = ".rswap/rswap_swap.swp", error_on_status = T)
msg$stdout %>% cat()
temp_directory <- build_rswap_directory(project_path)
file_path <- update_swp_paths(temp_directory, swap_file)
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
fixed_path <- file_path %>% str_remove(swap_wd)
# parse the command to run swap
command = glue("swap.exe {fixed_path}")
msg <- run(command = "swap.exe", wd = swap_wd, args = "rswap/rswap_swap.swp", error_on_status = T)
msg$stdout %>% cat()
msg <- run(command = "swap.exe", wd = swap_wd, args = "rswap/rswap_swap.swp", error_on_status = T)
msg$stdout %>% cat()
msg <- run(command = "swap.exe", wd = swap_wd, args = "rswap/rswap_swap.swp", error_on_status = T)
msg$stdout %>% cat()
source("~/GitHub/rswap/R/functions.R", echo=TRUE)
temp_directory <- build_rswap_directory(project_path)
file_path <- update_swp_paths(temp_directory, swap_file)
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
fixed_path <- file_path %>% str_remove(swap_wd)
# parse the command to run swap
command = glue("swap.exe {fixed_path}")
swap_wd
msg <- run(command = "swap.exe", wd = swap_wd, args = "rswap/rswap_swap.swp", error_on_status = T)
msg <- run(command = "swap.exe", wd = swap_wd, args = "rswap/rswap_swap.swp", error_on_status = F)
msg$stdout %>% cat()
swap_path = "C:/Users/mosh/Documents/swap.exe"
project_path = "C:/Users/mosh/Documents/tetves"
swap_file = "swap.swp"
temp_directory <- build_rswap_directory(project_path)
file_path <- update_swp_paths(temp_directory, swap_file)
swap_path_split = swap_path %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
fixed_path <- file_path %>% str_remove(swap_wd)
# parse the command to run swap
command = glue("swap.exe {fixed_path}")
command
swap_wd
msg <- run(command = "swap.exe", wd = swap_wd, args = "tetves/rswap/rswap_swap.swp", error_on_status = F)
msg$stdout %>% cat()
command
swap_wd
fixed_path
file_path
fixed_path
msg <- run(command = "swap.exe", wd = swap_wd, args = fixed_path, error_on_status = F)
msg
msg$status
# run the model
msg <-
run(
command = "swap.exe",
wd = swap_wd,
args = fixed_path,
error_on_status = F, timeout = timeout, echo_cmd = T
)
timeout = Inf
# run the model
msg <-
run(
command = "swap.exe",
wd = swap_wd,
args = fixed_path,
error_on_status = F, timeout = timeout, echo_cmd = T
)
# run the model
msg <-
run(
command = "swap.exe",
wd = swap_wd,
args = fixed_path,
error_on_status = F, timeout = timeout, echo_cmd = T, echo = T
)
# run the model
msg <-
run(
command = "swap.exe",
wd = swap_wd,
args = fixed_path,
error_on_status = F, timeout = timeout, echo_cmd = T, echo = T, spinner = T
)
