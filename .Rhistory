# get all depths if depth is left empty
if(depth %>% is.null()){
depth = get_depths(observed_data, var)
}
depth
var
splitted <- colnames(observed_data$data) %>% str_remove("obs") %>%
str_split("_") %>% unlist() %>% toupper()
char_index <-
splitted %>% as.numeric %>% is.na() %>% which() %>% suppressWarnings()
char_index = char_index[-which(splitted[char_index] == "NODEPTH")]
vars <- splitted[char_index]
vars
var_cols <- vars %in% var %>% which()
var_cols
d_split <-observed_data$data %>% colnames() %>% str_split("_") %>% unlist() %>% as.numeric() %>% suppressWarnings()
d_split <- d_split[which(d_split %>% is.na() == FALSE)]
d_split
d_split
depth %>% is.null()
d_split
d_split
# if depths exist, then find out the overlap
if(depth %>% is.null() == FALSE){
d_split <-observed_data$data %>% colnames() %>% str_split("_") %>% unlist() %>% as.numeric() %>% suppressWarnings()
d_split <- d_split[which(d_split %>% is.na() == FALSE)]
d_cols <- d_split %in% depth %>% which()
# +1 as correction for DATE
d_cols <- d_cols + 1
# take the overlap between var and depth cols
to_calculate <- d_cols %in% var_cols %>% which()
}else{
# if no depths exist, then just take all
to_calculate <- var_cols
}
to_calculate
library(rswap)
get_depths(observed_data,"DRAINAGE")
filter_observed(observed_data = observed_data, var = "DRAINAGE")
filter_observed(observed_data = observed_data, var = "DRAINAGE", depth = "14")
filter_observed(observed_data = observed_data, var = "DRAINAGE", depth = "15")
filter_observed(observed_data = observed_data,depth = "15")
filter_observed(observed_data = observed_data,depth = 15)
var = NULL
depth = 15
var <- var %>% toupper()
# get all vars if vars are left empty
if(var %>% is.null()){
var = observed_data$observed_variables
}
# get all depths if depth is left empty
if(depth %>% is.null()){
depth = get_depths(observed_data, var)
}
var
observed_data$observed_variables
# get all vars if vars are left empty
if(var %>% is.null()){
var = observed_data$observed_variables
}
# get all vars if vars are left empty
if(-){
# get all depths if depth is left empty
if(depth %>% is.null()){
depth = get_depths(observed_data, var)
}
var %>% is.null()
var %>% is.null()
var %>% is.null()
var %>% is.null()
var = NULL
Null
var <- var %>% toupper()
# get all vars if vars are left empty
if(var %>% is.null()){
var = observed_data$observed_variables
}
var
library(rswap)
filter_observed(observed_data = observed_data,depth = 15)
filter_observed(observed_data = observed_data,depth = 20)
filter_observed(observed_data = observed_data,depth = 20)
filter_observed(observed_data = observed_data,depth = 20)
depth = 20
# get all vars if vars are left empty
if(var %>% is.null()){
var = observed_data$observed_variables
var <- var %>% toupper()
}else{
var <- var %>% toupper()
}
var
var = NULL
# get all vars if vars are left empty
if(var %>% is.null()){
var = observed_data$observed_variables
var <- var %>% toupper()
}else{
var <- var %>% toupper()
}
var
depth
# get all depths if depth is left empty
if(depth %>% is.null()){
depth = get_depths(observed_data, var)
}
depth
splitted <- colnames(observed_data$data) %>% str_remove("obs") %>%
str_split("_") %>% unlist() %>% toupper()
splitted
char_index <-
splitted %>% as.numeric %>% is.na() %>% which() %>% suppressWarnings()
char_index = char_index[-which(splitted[char_index] == "NODEPTH")]
vars <- splitted[char_index]
var_cols <- vars %in% var %>% which()
var_cols
d_split <-observed_data$data %>% colnames() %>% str_split("_") %>% unlist() %>% as.numeric() %>% suppressWarnings()
d_split <- d_split[which(d_split %>% is.na() == FALSE)]
d_cols <- d_split %in% depth %>% which()
# +1 as correction for DATE
d_cols <- d_cols + 1
d_cols
d_cols
d_cols <- d_split %in% depth %>% which()
d_cols <- d_split %in% depth %>% which()
d_cols
d_split
d_cols
# take the overlap between var and depth cols
to_calculate <- d_cols %in% var_cols %>% which()
d_cols
var_cols
observed_data$data %>% colnames()
d_cols
d_cols <- d_split %in% depth %>% which()
d_cols
d_cols
d_cols <- d_cols+1
d_cols
var_cols
# take the overlap between var and depth cols
to_calculate <- d_cols %in% var_cols %>% which()
to_calculate
d_cols
to_calculate
d_cols
var_cols
# take the overlap between var and depth cols
to_calculate <- d_cols %in% var_cols %>% which()
library(rswap)
library(rswap)
library(rswap)
project_path = "C:/Users/mosh/Documents/tetves"
swap_exe = "C:/Users/mosh/Documents/swap.exe"
swap_file = "swap.swp"
observed = "C:/Users/mosh/Documents/tetves/observed_data.xlsx"
observed_data <- rswap::load_observed(path = observed, verbose = T)
var = c("WC", "DRAINAGE")
observed_data$data %>% colnames()
colnames <- observed_data$data %>% colnames()
colz <- observed_data$data %>% colnames()
stri_extract_all_regex(str = colz, pattern = paste(paste0("obs",var), collapse = "|"))
library(stringi)
stri_extract_all_regex(str = colz, pattern = paste(paste0("obs",var), collapse = "|"))
var
paste(paste0("obs",var)
paste0("obs",var)
paste0("obs",var)
colz
stri_extract_all_regex(str = colz, pattern = paste(paste0("obs",var %>% toupper()), collapse = "|"))
paste0("obs",var %>% toupper()
paste0("obs",var %>% toupper()
paste0("obs",var %>% toupper())
paste0("obs",var %>% toupper())
colz
var
paste0("obs",var %>% toupper())
paste0("obs",var %>% toupper())
paste0("obs",var %>% toupper())
paste(paste0("obs",var %>% toupper()), collapse = "|")
paste(paste0("obs",var %>% toupper()), collapse = "|")
paste(paste0("obs",var %>% toupper()), collapse = "|")
paste(paste0("obs",var %>% toupper()), collapse = "|")
colz
colz <- observed_data$data %>% colnames() %>% toupper()
stri_extract_all_regex(str = colz, pattern = paste(paste0("obs",var %>% toupper()), collapse = "|"))
paste(paste0("obs",var %>% toupper())
paste(paste0("obs",var %>% toupper()),
paste(paste0("obs",var %>% toupper()), collapse = "|")
stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|"))
stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|")) %>%
unlist()
find <- stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|")) %>%
unlist()
find <- stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|")) %>%
unlist() %>% is.character()
find
find <- stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|")) %>%
unlist() %>% which()
find <- stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|")) %>%
unlist() %>% is.na()
find
find == FALSE
relevant_var_cols <- find == FALSE %>% which()
relevant_var_cols
find <- stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|")) %>%
unlist() %>% is.na()
relevant_var_cols <- (find == FALSE %>% which())
relevant_var_cols
find
relevant_var_cols <- (find == FALSE) %>% which()
relevant_var_cols
colz
get_depths(observed_data)
splitted <- colnames(observed_data$data) %>% str_remove("obs") %>%
str_split("_") %>% unlist() %>% toupper()
splitted
char_index <-
splitted %>% as.numeric %>% is.na() %>% which() %>% suppressWarnings()
splitted <- colnames(observed_data$data) %>% str_remove("obs") %>%
str_split("_") %>% unlist() %>% toupper()
char_index <-
splitted %>% as.numeric %>% is.na() %>% which() %>% suppressWarnings()
char_index = char_index[-which(splitted[char_index] == "NODEPTH")]
vars <- splitted[char_index]
vars
depths <- colnames(observed_data$data)[var_cols] %>% str_split("_") %>% unlist() %>% as.numeric() %>% suppressWarnings()
depths <- depths[which(depths %>% is.na() == FALSE)] # remove the NA values
depths
depths
library(rswap)
get_depths(observed_data)
get_depths(observed_data)
get_depths(observed_data)
get_depths(observed_data)
#' get_depth
#'
#' extract numeric depth values for given observed variable
#' @param observed_data **REQ** (list) as given by load_observed()
#' @param variable **OPT** (string) variable for which depth levels should be given.
#' If no variable is given, all depths will be returned
#' @returns numeric vector of depths
#' @export
get_depths <- function(observed_data, variable = NULL) {
splitted <- colnames(observed_data$data) %>% str_remove("obs") %>%
str_split("_") %>% unlist() %>% toupper()
char_index <-
splitted %>% as.numeric %>% is.na() %>% which() %>% suppressWarnings()
char_index = char_index[-which(splitted[char_index] == "NODEPTH")]
vars <- splitted[char_index]
if(variable %>% is.null == FALSE){
var_cols <- vars %in% variable %>% which()
}else{
var_cols <- vars
}
depths <- colnames(observed_data$data)[var_cols] %>% str_split("_") %>% unlist() %>% as.numeric() %>% suppressWarnings()
depths <- depths[which(depths %>% is.na() == FALSE)] # remove the NA values
if(length(depths)<1){
depths = NULL
}
return(depths)
}
get_depths(observed_data)
splitted <- colnames(observed_data$data) %>% str_remove("obs") %>%
str_split("_") %>% unlist() %>% toupper()
char_index <-
splitted %>% as.numeric %>% is.na() %>% which() %>% suppressWarnings()
char_index = char_index[-which(splitted[char_index] == "NODEPTH")]
vars <- splitted[char_index]
variable
variable = NULL
get_depths(observed_data)
splitted <- colnames(observed_data$data) %>% str_remove("obs") %>%
str_split("_") %>% unlist() %>% toupper()
char_index <-
splitted %>% as.numeric %>% is.na() %>% which() %>% suppressWarnings()
char_index = char_index[-which(splitted[char_index] == "NODEPTH")]
vars <- splitted[char_index]
vars
variable
variable %>% is.null()
library(rswap)
project_path = "C:/Users/mosh/Documents/tetves"
swap_exe = "C:/Users/mosh/Documents/swap.exe"
swap_file = "swap.swp"
observed = "C:/Users/mosh/Documents/tetves/observed_data.xlsx"
observed_data <- rswap::load_observed(path = observed, verbose = T)
get_depths(observed_data)
splitted <- colnames(observed_data$data) %>% str_remove("obs") %>%
str_split("_") %>% unlist() %>% toupper()
char_index <-
splitted %>% as.numeric %>% is.na() %>% which() %>% suppressWarnings()
variable = NULL
splitted <- colnames(observed_data$data) %>% str_remove("obs") %>%
str_split("_") %>% unlist() %>% toupper()
char_index <-
splitted %>% as.numeric %>% is.na() %>% which() %>% suppressWarnings()
char_index = char_index[-which(splitted[char_index] == "NODEPTH")]
vars <- splitted[char_index]
variable %>% is.null()
vars
if(variable %>% is.null() == FALSE){
var_cols <- vars %in% variable %>% which()
}else{
var_cols <- vars
}
depths <- colnames(observed_data$data)[var_cols] %>% str_split("_") %>% unlist() %>% as.numeric() %>% suppressWarnings()
depths
colnames(observed_data$data)[var_cols]
observed_data
colnames(observed_data$data)[var_cols]
var_cols
char_index
var_cols <- var %in% observed_data$observed_variables
var_cols
var
var_cols <- vars %in% observed_data$observed_variables
var_cols
var_cols <- vars %in% observed_data$observed_variables %>% which()
var_cols
depths <- colnames(observed_data$data)[var_cols] %>% str_split("_") %>% unlist() %>% as.numeric() %>% suppressWarnings()
depths <- depths[which(depths %>% is.na() == FALSE)] # remove the NA values
depths
library(rswap)
get_depths(observed_data)
get_depths(observed_data,"DRAINAGE")
get_depths(observed_data,variable = "DRAINAGE")
variable = "DRAINAGE"
splitted <- colnames(observed_data$data) %>% str_remove("obs") %>%
str_split("_") %>% unlist() %>% toupper()
char_index <-
splitted %>% as.numeric %>% is.na() %>% which() %>% suppressWarnings()
char_index = char_index[-which(splitted[char_index] == "NODEPTH")]
vars <- splitted[char_index]
vars
variable %>% is.null()
var_cols <- vars %in% variable %>% which()
if(variable %>% is.null() == FALSE){
var_cols <- vars %in% variable %>% which()
}else{
var_cols <- vars %in% observed_data$observed_variables %>% which()
}
var_cols
depths <- colnames(observed_data$data)[var_cols] %>% str_split("_") %>% unlist() %>% as.numeric() %>% suppressWarnings()
depths
get_depths(observed_data,variable = "DRAINAGE")
get_depths(observed_data,variable = "WC")
get_depths(observed_data,variable = "H")
colz <- observed_data$data %>% colnames() %>% toupper()
find <- stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|")) %>%
unlist() %>% is.na()
colz
var
var = "WC"
find <- stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|")) %>%
unlist() %>% is.na()
find
relevant_var_cols <- (find == FALSE) %>% which()
# which were matched? index.
relevant_var_cols <- (find == FALSE) %>% which()
relevant_var_cols
var
depths = get_depths(observed_data, var)
depths
depths = get_depths(observed_data, var) %>% as.character()
depths
find2 <- stri_extract_all_regex(str = colz, pattern = paste(depths, collapse = "|")) %>%
unlist() %>% is.na()
find2
relevant_depth_cols <- (find == FALSE) %>% which()
relevant_depth_cols
relevant_depth_cols <- (find2 == FALSE) %>% which()
relevant_depth_cols
relevant_var_cols
depth %>% !is.null()
var %>% !is.null()
var %>% !is.null()
depth %>% !is.null() == FALSE
if(depth %>% !is.null() == FALSE & var %>% is.null()){
}
depth = 154
depth = 15
depth %>% !is.null()
depth %>% !is.null() == FALSE
depth %>% !is.null() == FALSE
depth %>% !is.null() == FALSE
depth %>% !is.null() == FALSE
depth %>% is.null() == FALSE
depth %>% is.null() == FALSE
depth %>% is.null() == FALSE
union <- c(relevant_depth_cols, relevant_var_cols) %>% unique()
union
relevant_var_cols
depth = "15"
depth = 15
var = c("H", )
var = c("H", "WC")
colz <- observed_data$data %>% colnames() %>% toupper()
find <- stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|")) %>%
unlist() %>% is.na()
# which were matched? index.
relevant_var_cols <- (find == FALSE) %>% which()
depths = get_depths(observed_data, var) %>% as.character()
find2 <- stri_extract_all_regex(str = colz, pattern = paste(depths, collapse = "|")) %>%
unlist() %>% is.na()
relevant_depth_cols <- (find2 == FALSE) %>% which()
relevant_depth_cols
depths
var
depth
depths
depths
depths <- depths %in% depth
depths
depths <- depths %>% filter(depths==depth)
depths = get_depths(observed_data, var) %>% as.character()
depths
depths <- depths %>% filter(depths==depth)
depths
depth = depth %>% as.character()
depths <- depths %>% filter(depths==depth)
depths <- depths[which(depths == depth)]
depths
colz <- observed_data$data %>% colnames() %>% toupper()
find <- stri_extract_all_regex(str = colz, pattern = paste(paste0("OBS",var %>% toupper()), collapse = "|")) %>%
unlist() %>% is.na()
# which were matched? index.
relevant_var_cols <- (find == FALSE) %>% which()
depths = get_depths(observed_data, var) %>% as.character()
if(dept %>% is.null() == FALSE){
depth = depth %>% as.character()
depths <- depths[which(depths == depth)]
}
if(depth %>% is.null() == FALSE){
depth = depth %>% as.character()
depths <- depths[which(depths == depth)]
}
find2 <- stri_extract_all_regex(str = colz, pattern = paste(depths, collapse = "|")) %>%
unlist() %>% is.na()
relevant_depth_cols <- (find2 == FALSE) %>% which()
relevant_depth_cols
relevant_depth_cols
relevant_var_cols
depth
var
# if both depth and var were given, then
union(relevant_var_cols, relevant_depth_cols)
# if both depth and var were given, then
intersect(relevant_var_cols, relevant_depth_cols)
# if both depth and var were given, then
union <- intersect(relevant_var_cols, relevant_depth_cols)
union
perf_mod <- observed_data$data %>% select(DATE, all_of(union), addtional)
addtional = NULL
perf_mod <- observed_data$data %>% select(DATE, all_of(union), addtional)
perf_mod <- observed_data$data %>% select(DATE, all_of(union), all_of(addtional))
perf_mod
library(rswap)
filter_observed(observed_data = observed_data,depth = 20)
filter_observed(observed_data = observed_data,depth = 15)
filter_observed(observed_data = observed_data,var = "WC", depth = 15)
filter_observed(observed_data = observed_data,var = "WC")
filter_observed(observed_data = observed_data,var = c("WC", "DRAINAGE")
filter_observed(observed_data = observed_data,var = c("WC", "DRAINAGE"))
filter_observed(observed_data = observed_data,var = c("WC", "DRAINAGE"))
filter_observed(observed_data = observed_data,depth = 15
filter_observed(observed_data = observed_data,depth = 15)
filter_observed(observed_data = observed_data,depth = 15)
variable = "WC"
depth = 15
observed_data_filtered <- filter_observed(observed_data, variable, depth)
observed_data_filtered
modelled_data <- rswap::read_swap_output(project_path)
modelled_data
observed_data_filtered
modelled_data
result_output <- read.table(
glue("{read_path}/result_output.csv"),
comment.char = "*",
sep = ",",
dec = ".",
header = T
) %>% tibble()
read_path <- glue("{project_path}/rswap")
result_output <- read.table(
glue("{read_path}/result_output.csv"),
comment.char = "*",
sep = ",",
dec = ".",
header = T
) %>% tibble()
result_output
result_output$DATETIME <- result_output$DATETIME %>% as.Date()
result_output
colnames(result_output)[1] <- "DATE"
result_output
modelled_data <- rswap::read_swap_output(project_path)
library(rswap)
modelled_data <- rswap::read_swap_output(project_path)
modelled_data
observed_data_filtered
data <- read_excel(path)
path = observed
data <- read_excel(path)
data
data$DATE <- data$DATE %>% as.Date()
data
library(rswap)
observed_data <- rswap::load_observed(path = observed, verbose = T)
observed_data
modelled_data <- rswap::read_swap_output(project_path)
modelled_data
