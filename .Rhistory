parse_result$parameters, verbose)
params
source("~/GitHub/private/rswap/R/io.R")
source("~/GitHub/private/rswap/R/io.R")
# changes the paths in the swap main file to reflect the temporary location
params <- update_swp_paths(project_path, swap_exe,
parse_result$parameters, verbose)
params
observed_path <- paste0(rswap_directory, "rswap_observed_data.xlsx")
if(file.exists(observed_path) == FALSE){
warning("Observed file not found!\n",observed_path )
}
obs <- load_observed(path = observed_path)
variables <- obs$observed_variables
depths <- get_depths(data = obs$data) %>% sort()
# add the critical output params if they are not present.
if("INLIST_CSV" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV", value = "", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("SWCSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "SWCSV_TZ", value = "1", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("INLIST_CSV_TZ " %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV_TZ ", value = "'WC,H,TEMP'", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}else{
params$value[which(params$param=="INLIST_CSV_TZ")] = 'WC,H,TEMP'
}
params <- set_swap_output(params, variables, depths, verbose)
inlistcsv <- params$value[which(params$param == "INLIST_CSV")]
inlistcsv <- inlistcsv %>% str_split("!") %>% unlist()
inlistcsv <- inlistcsv[1]
inlistcsv
# print
if (verbose) {
cat(
"\n...autosetting SWAP output to match observed files:\n",
"INLIST_CSV = ",
inlistcsv,
"\n"
)
}
cat(
"\n...autosetting SWAP output to match observed files:\n",
"INLIST_CSV = ",
"\n"
)
cat(
"\n...autosetting SWAP output to match observed files:\n")
cat(
"\n...autosetting SWAP output to match observed files\n")
# change console output based on verbose flag
if (verbose) {
params <- change_swap_par(params, "SWSCRE", 2)
}else{
params <- change_swap_par(params, "SWSCRE", 0)
}
# location for where the swap file is to be written
outpath <- paste0(rswap_directory, swap_file)
outpath
rswap_file <- write_swap_file(
parameters = params,
table_path = parse_result$table_path,
outpath = outpath,
verbose = verbose
)
# parse the working directory from the given swap path
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[, 1]
swap_wd
# remove the working directory from the path of the swap main file
fixed_path <- rswap_file %>% str_remove(swap_wd)
fixed_path
fixed_path
# run the model
msg <- run(
command = "swap.exe",
wd = working_dir,
args = fixed_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
working_dir
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = fixed_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
fixed_path
outpath
# remove the working directory from the path of the swap main file
swap_file_path <- glue("{project}/rswap/swap_file")
swap_file_path
# remove the working directory from the path of the swap main file
swap_file_path <- glue("{project}/rswap/{swap_file}")
swap_file_path
fixed_path
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = swap_file_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
temp_directory <- build_rswap_directory(project_path)
temp_directory
path = paste0(project_path, "/", swap_file)
path = paste0(project_path, "/", swap_file)
swp <- clean_swp_file(project_path, swap_file = swap_file)
swp
# predefine for-loop vars
par_df <- data.frame()
tab_df <- list()
new_i = 0
special_cases<-c("OUTDATINT", "OUTDAT")
table_path = paste0(project_path, "/rswap/tables")
dir.create(table_path, showWarnings = F)
# the line to be handled
line = swp[i]
i = 17
# the line to be handled
line = swp[i]
line
swap[16]
swp[16]
swp[16]
swp[15]
swp[14]
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
# changes the paths in the swap main file to reflect the temporary location
params <- update_swp_paths(project_path, swap_exe,
parse_result$parameters, verbose)
observed_path <- paste0(rswap_directory, "rswap_observed_data.xlsx")
if(file.exists(observed_path) == FALSE){
warning("Observed file not found!\n",observed_path )
}
if (autoset_output) {
obs <- load_observed(path = observed_path)
variables <- obs$observed_variables
depths <- get_depths(data = obs$data) %>% sort()
# add the critical output params if they are not present.
if("INLIST_CSV" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV", value = "", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("SWCSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "SWCSV_TZ", value = "1", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("INLIST_CSV_TZ " %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV_TZ ", value = "'WC,H,TEMP'", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}else{
params$value[which(params$param=="INLIST_CSV_TZ")] = 'WC,H,TEMP'
}
params <- set_swap_output(params, variables, depths, verbose)
inlistcsv <- params$value[which(params$param == "INLIST_CSV")]
inlistcsv <- inlistcsv %>% str_split("!") %>% unlist()
inlistcsv <- inlistcsv[1]
# print
if (verbose) {
cat(
"\n...autosetting SWAP output to match observed files\n")
}
}
# change console output based on verbose flag
if (verbose) {
params <- change_swap_par(params, "SWSCRE", 2)
}else{
params <- change_swap_par(params, "SWSCRE", 0)
}
# location for where the swap file is to be written
outpath <- paste0(rswap_directory, swap_file)
rswap_file <- write_swap_file(
parameters = params,
table_path = parse_result$table_path,
outpath = outpath,
verbose = verbose
)
swap_file_path <- glue("{project}/rswap/{swap_file}")
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = swap_file_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
seperated <- project_path %>% str_split("/") %>% unlist()
project <- seperated %>% tail(1)
work_dir <-seperated[1:length(seperated)-1] %>% paste(collapse = "/")
swap_exe <- work_dir %>% paste(collapse = "/") %>% paste0(.,"/swap.exe")
if(file.exists(swap_exe)==FALSE){
stop(glue("swap.exe must be located in parent directory of {project}!\n Required Path: {swap_exe}"))
}
# builds a directory for performing package actions, and returns the path
rswap_directory <- build_rswap_directory(project_path)
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
# changes the paths in the swap main file to reflect the temporary location
params <- update_swp_paths(project_path, swap_exe,
parse_result$parameters, verbose)
View(params)
seperated <- project_path %>% str_split("/") %>% unlist()
project <- seperated %>% tail(1)
work_dir <-seperated[1:length(seperated)-1] %>% paste(collapse = "/")
swap_exe <- work_dir %>% paste(collapse = "/") %>% paste0(.,"/swap.exe")
if(file.exists(swap_exe)==FALSE){
stop(glue("swap.exe must be located in parent directory of {project}!\n Required Path: {swap_exe}"))
}
# builds a directory for performing package actions, and returns the path
rswap_directory <- build_rswap_directory(project_path)
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
# changes the paths in the swap main file to reflect the temporary location
params <- update_swp_paths(project_path, swap_exe,
parse_result$parameters, verbose)
View(params)
# builds a directory for performing package actions, and returns the path
rswap_directory <- build_rswap_directory(project_path)
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
# changes the paths in the swap main file to reflect the temporary location
params <- update_swp_paths(project_path, swap_exe,
parse_result$parameters, verbose)
observed_path <- paste0(rswap_directory, "rswap_observed_data.xlsx")
if(file.exists(observed_path) == FALSE){
warning("Observed file not found!\n",observed_path )
}
if (autoset_output) {
obs <- load_observed(path = observed_path)
variables <- obs$observed_variables
depths <- get_depths(data = obs$data) %>% sort()
# add the critical output params if they are not present.
if("INLIST_CSV" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV", value = "", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("SWCSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "SWCSV_TZ", value = "1", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("INLIST_CSV_TZ " %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV_TZ ", value = "'WC,H,TEMP'", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}else{
params$value[which(params$param=="INLIST_CSV_TZ")] = 'WC,H,TEMP'
}
params <- set_swap_output(params, variables, depths, verbose)
inlistcsv <- params$value[which(params$param == "INLIST_CSV")]
inlistcsv <- inlistcsv %>% str_split("!") %>% unlist()
inlistcsv <- inlistcsv[1]
# print
if (verbose) {
cat(
"\n...autosetting SWAP output to match observed files\n")
}
}
# change console output based on verbose flag
if (verbose) {
params <- change_swap_par(params, "SWSCRE", 2)
}else{
params <- change_swap_par(params, "SWSCRE", 0)
}
# location for where the swap file is to be written
outpath <- paste0(rswap_directory, swap_file)
rswap_file <- write_swap_file(
parameters = params,
table_path = parse_result$table_path,
outpath = outpath,
verbose = verbose
)
swap_file_path <- glue("{project}/rswap/{swap_file}")
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = swap_file_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
View(params)
"INLIST_CSV_TZ " %in% params$param
seperated <- project_path %>% str_split("/") %>% unlist()
project <- seperated %>% tail(1)
work_dir <-seperated[1:length(seperated)-1] %>% paste(collapse = "/")
swap_exe <- work_dir %>% paste(collapse = "/") %>% paste0(.,"/swap.exe")
if(file.exists(swap_exe)==FALSE){
stop(glue("swap.exe must be located in parent directory of {project}!\n Required Path: {swap_exe}"))
}
# builds a directory for performing package actions, and returns the path
rswap_directory <- build_rswap_directory(project_path)
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
# changes the paths in the swap main file to reflect the temporary location
params <- update_swp_paths(project_path, swap_exe,
parse_result$parameters, verbose)
observed_path <- paste0(rswap_directory, "rswap_observed_data.xlsx")
if(file.exists(observed_path) == FALSE){
warning("Observed file not found!\n",observed_path )
}
obs <- load_observed(path = observed_path)
variables <- obs$observed_variables
depths <- get_depths(data = obs$data) %>% sort()
View(params)
View(params)
"INLIST_CSV" %in% params$param
"SWCSV_TZ" %in% params$param
"INLIST_CSV_TZ " %in% params$param
seperated <- project_path %>% str_split("/") %>% unlist()
project <- seperated %>% tail(1)
work_dir <-seperated[1:length(seperated)-1] %>% paste(collapse = "/")
swap_exe <- work_dir %>% paste(collapse = "/") %>% paste0(.,"/swap.exe")
if(file.exists(swap_exe)==FALSE){
stop(glue("swap.exe must be located in parent directory of {project}!\n Required Path: {swap_exe}"))
}
# builds a directory for performing package actions, and returns the path
rswap_directory <- build_rswap_directory(project_path)
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
# changes the paths in the swap main file to reflect the temporary location
params <- update_swp_paths(project_path, swap_exe,
parse_result$parameters, verbose)
observed_path <- paste0(rswap_directory, "rswap_observed_data.xlsx")
if(file.exists(observed_path) == FALSE){
warning("Observed file not found!\n",observed_path )
}
if (autoset_output) {
obs <- load_observed(path = observed_path)
variables <- obs$observed_variables
depths <- get_depths(data = obs$data) %>% sort()
# add the critical output params if they are not present.
if("INLIST_CSV" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV", value = "", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("SWCSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "SWCSV_TZ", value = "1", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("INLIST_CSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV_TZ ", value = "'WC,H,TEMP'", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}else{
params$value[which(params$param=="INLIST_CSV_TZ")] = 'WC,H,TEMP'
}
params <- set_swap_output(params, variables, depths, verbose)
inlistcsv <- params$value[which(params$param == "INLIST_CSV")]
inlistcsv <- inlistcsv %>% str_split("!") %>% unlist()
inlistcsv <- inlistcsv[1]
# print
if (verbose) {
cat(
"\n...autosetting SWAP output to match observed files\n")
}
}
# change console output based on verbose flag
if (verbose) {
params <- change_swap_par(params, "SWSCRE", 2)
}else{
params <- change_swap_par(params, "SWSCRE", 0)
}
# location for where the swap file is to be written
outpath <- paste0(rswap_directory, swap_file)
rswap_file <- write_swap_file(
parameters = params,
table_path = parse_result$table_path,
outpath = outpath,
verbose = verbose
)
swap_file_path <- glue("{project}/rswap/{swap_file}")
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = swap_file_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
inlistcsv <- params$value[which(params$param == "INLIST_CSV")]
inlistcsv <- inlistcsv %>% str_split("!") %>% unlist()
inlistcsv <- inlistcsv[1]
inlistcsv
inlistcsv
params <- change_swap_par(params, name = "INLIST_CSV", value = inlistcsv)
View(params)
View(params)
seperated <- project_path %>% str_split("/") %>% unlist()
project <- seperated %>% tail(1)
work_dir <-seperated[1:length(seperated)-1] %>% paste(collapse = "/")
swap_exe <- work_dir %>% paste(collapse = "/") %>% paste0(.,"/swap.exe")
if(file.exists(swap_exe)==FALSE){
stop(glue("swap.exe must be located in parent directory of {project}!\n Required Path: {swap_exe}"))
}
# builds a directory for performing package actions, and returns the path
rswap_directory <- build_rswap_directory(project_path)
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
# changes the paths in the swap main file to reflect the temporary location
params <- update_swp_paths(project_path, swap_exe,
parse_result$parameters, verbose)
observed_path <- paste0(rswap_directory, "rswap_observed_data.xlsx")
if(file.exists(observed_path) == FALSE){
warning("Observed file not found!\n",observed_path )
}
if (autoset_output) {
obs <- load_observed(path = observed_path)
variables <- obs$observed_variables
depths <- get_depths(data = obs$data) %>% sort()
# add the critical output params if they are not present.
if("INLIST_CSV" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV", value = "", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("SWCSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "SWCSV_TZ", value = "1", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("INLIST_CSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV_TZ ", value = "'WC,H,TEMP'", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}else{
params$value[which(params$param=="INLIST_CSV_TZ")] = "'WC,H,TEMP'"
}
params <- set_swap_output(params, variables, depths, verbose)
# print
if (verbose) {
cat(
"\n...autosetting SWAP output to match observed files\n")
}
}
# change console output based on verbose flag
if (verbose) {
params <- change_swap_par(params, "SWSCRE", 2)
}else{
params <- change_swap_par(params, "SWSCRE", 0)
}
# location for where the swap file is to be written
outpath <- paste0(rswap_directory, swap_file)
rswap_file <- write_swap_file(
parameters = params,
table_path = parse_result$table_path,
outpath = outpath,
verbose = verbose
)
swap_file_path <- glue("{project}/rswap/{swap_file}")
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = swap_file_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
library(rswap)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
run_swap(project_path, verbose = T)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
project_path = "C:/Users/mosh/Documents/rswap_local/kvithamar_r1a"
run_swap(project_path, verbose = T)
swap_file_path
swap_exe
work_dir
project
seperated
library(rswap)
?rswap
