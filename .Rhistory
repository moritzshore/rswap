obs <- load_observed(project_path)
variable = obs$observed_variables
}
rlist <- match_mod_obs(
project_path = project_path,
variable = variable,
depth = depth,
verbose = verbose,
archived = archived
)
project_path
observed_data <- load_observed(project_path = project_path, verbose = verbose)
observed_data <- load_observed(project_path = project_path, verbose = verbose)
project_path %>% str_remove("/rswap/")
project_path
project_path
path <- paste0(project_path, "/rswap_observed_data.xlsx")
data <- read_excel(path, skip = 1) # skip 1 to remove the comment line
performance = get_performance(
project_path = file,
archived = TRUE,
stat = stat,
variable = var,
depth = depth,
verbose = verbose
)
library(rswap)
performance = get_performance(
project_path = file,
archived = TRUE,
stat = stat,
variable = var,
depth = depth,
verbose = verbose
)
performance
mean_perf <- performance[2] %>% pull() %>% mean() %>% round(4)
performance$run = run_name
performance$mean = mean_perf
stat_df <- rbind(stat_df, performance)
last_run <- get_performance(
project_path = project_path,
stat = stat,
variable = var,
depth = depth,
verbose = verbose
)
plot_statistics(
project_path,
var = "WC",
stat = "PBIAS",
depth = c(15, 40, 70),
graph = "ggplot"
)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
plot_statistics(
project_path,
var = "WC",
stat = "PBIAS",
depth = c(15, 40, 70),
graph = "ggplot"
)
parsed <- parse_swp_file(project_path, swap_file = "swap.swp")
parameters <- change_swap_par(param = parsed$parameters, name = "COFRED", value = 0.55)
write_swap_file(parameters = parameters, table_path = parsed$table_path, outpath = paste0(project_path, "/modified.swp"))
parsed <- parse_swp_file(project_path, "modified.swp")
run_swap(project_path, "modified.swp",verbose = T )
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
parsed <- parse_swp_file(project_path, swap_file = "swap.swp")
parameters <- change_swap_par(param = parsed$parameters, name = "COFRED", value = 0.55)
write_swap_file(parameters = parameters, table_path = parsed$table_path, outpath = paste0(project_path, "/modified.swp"))
parsed <- parse_swp_file(project_path, "modified.swp")
run_swap(project_path, "modified.swp",verbose = T )
save_run(project_path, "frank5")
plot_statistics(
project_path,
var = "WC",
stat = "RMSE",
depth = c(15, 40, 70),
graph = "ggplot"
)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
swap_file = "swap.swp"
swap_exe = "C:/Users/mosh/Documents/rswap_local/swap.exe"
rswap::rswap_init(swap_exe)
run_swap(project_path, verbose = T)
projs <- list.files("C:/Users/mosh/Documents/rswap_local/", full.names = T)
projs<-projs[-(grepl(x=projs, ".exe") %>% which())]
sample(projs, 8)
for (project_path in sample(projs, 8)) {
status <- run_swap(project_path, verbose = T, autoset_output = T)
if(status != "100"){
stop("FAILED at", project_path)
}
}
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
status <-
run_swap(
project_path = "C:/Users/mosh/Documents/rswap_local/tetves",
verbose = T,
autoset_output = T
)
# Parse paths
seperated <- project_path %>% str_split("/") %>% unlist()
project <- seperated %>% tail(1)
work_dir <-seperated[1:length(seperated)-1] %>% paste(collapse = "/")
swap_exe <- work_dir %>% paste(collapse = "/") %>% paste0(.,"/swap.exe")
swap_file_path <- glue("{project}/rswap/{swap_file}")
seperated
project
work_dir
swap_exe
swap_file_path
if(file.exists(swap_exe)==FALSE){
stop(glue("swap.exe must be located in parent directory of {project}!\n Required Path: {swap_exe}"))
}
# Refesh the temp directory
unlink(paste0(project_path, "/rswap"), recursive = T)
# builds a directory for performing package actions, and returns the path
rswap_directory <- build_rswap_directory(project_path)
source("~/GitHub/private/rswap/R/io.R")
# builds a directory for performing package actions, and returns the path
rswap_directory <- build_rswap_directory(project_path)
rswap_directory
# reads in the swap parameters and tables
parse_result <- parse_swp_file(project_path = project_path,
swap_file = swap_file,
verbose = verbose)
# changes the paths in the swap main file to reflect the temporary location
params <-
update_swp_paths(
project_path = project_path,
swap_exe = swap_exe,
parameters = parse_result$parameters,
verbose =  verbose
)
# load observed data
observed_path <- paste0(rswap_directory, "/rswap_observed_data.xlsx")
if(file.exists(observed_path) == FALSE){
warning("Observed file not found!\n",observed_path )
}
obs <- load_observed(rswap_directory)
library(readxl)
obs <- load_observed(rswap_directory)
obs <- load_observed(project_path)
variables <- obs$observed_variables
depths <- get_depths(data = obs$data) %>% sort()
# add the critical output params if they are not present.
if("INLIST_CSV" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV", value = "", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("SWCSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "SWCSV_TZ", value = "1", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("INLIST_CSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV_TZ ", value = "'WC,H,TEMP'", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}else{
params$value[which(params$param=="INLIST_CSV_TZ")] = "'WC,H,TEMP'"
}
# Set output wrapper function
params <- set_swap_output(params, variables, depths, verbose)
# print
if (verbose) {
cat(
"\n...autosetting SWAP output to match observed files\n")
}
# routine for automatically setting output (could be improved)
# TODO move all of this to set_swap_output()
if (autoset_output) {
obs <- load_observed(project_path)
variables <- obs$observed_variables
depths <- get_depths(data = obs$data) %>% sort()
# add the critical output params if they are not present.
if("INLIST_CSV" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV", value = "", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("SWCSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "SWCSV_TZ", value = "1", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}
# add the critical output params if they are not present.
if("INLIST_CSV_TZ" %in% params$param == FALSE){
add <- data.frame(param = "INLIST_CSV_TZ ", value = "'WC,H,TEMP'", comment = glue("added by rswap on {Sys.time()}"))
params <- rbind(params, add)
}else{
params$value[which(params$param=="INLIST_CSV_TZ")] = "'WC,H,TEMP'"
}
# Set output wrapper function
params <- set_swap_output(params, variables, depths, verbose)
# print
if (verbose) {
cat(
"\n...autosetting SWAP output to match observed files\n")
}
}
# change console output based on verbose flag
if (verbose) {
params <- change_swap_par(params, "SWSCRE", 2)
}else{
params <- change_swap_par(params, "SWSCRE", 0)
}
# location for where the swap file is to be written
# change this name to "rswap.swp"?
outpath <- paste0(rswap_directory, "/", swap_file)
outpath
# Write swap file
rswap_file <- write_swap_file(
parameters = params,
table_path = parse_result$table_path,
outpath = outpath,
verbose = verbose
)
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = swap_file_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
library(processx)
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = swap_file_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
timeout = Inf
# run the model
msg <- run(
command = "swap.exe",
wd = work_dir,
args = swap_file_path,
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose
)
# TODO expand this
if (msg$status != "100") {
warning(glue("SWAP error, code {msg$status}"))
if (msg$status == "2") {
warning(glue("SWAP model timed out, with timeout {timeout}"))
}
}
# Move reruns.log and swap.ok to the temp directory.
reruns <- paste0(work_dir, "/reruns.log")
if (file.exists(reruns)) {
file.copy(from  = reruns,
to = paste0(work_dir, "/", project, "/rswap/reruns.log"))
file.remove(reruns)
if (verbose) {
cat("\n...copying reruns.log to rswap directory\n")
}
}
swap_ok <- paste0(work_dir, "/swap.ok")
if (file.exists(swap_ok)) {
file.copy(from  = swap_ok,
to = paste0(work_dir, "/", project, "/rswap/swap.ok"))
file.remove(swap_ok)
if (verbose) {
cat("\n...copying swap.ok to rswap directory\n")
}
}
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
swap_file = "swap.swp"
swap_exe = "C:/Users/mosh/Documents/rswap_local/swap.exe"
rswap::rswap_init(swap_exe)
library(rswap)
run_swap(project_path, verbose = T)
projs <- list.files("C:/Users/mosh/Documents/rswap_local/", full.names = T)
projs<-projs[-(grepl(x=projs, ".exe") %>% which())]
sample(projs, 8)
for (project_path in sample(projs, 8)) {
status <- run_swap(project_path, verbose = T, autoset_output = T)
if(status != "100"){
stop("FAILED at", project_path)
}
}
project_path
for (project_path in sample(projs, 8)) {
status <- run_swap(project_path, verbose = T, autoset_output = T)
if(status != "100"){
stop("FAILED at", project_path)
}
}
project_path
work_dir
# remove any temp files left over in WD
list.files(path = work_dir)
# remove any temp files left over in WD
list.files(path = work_dir, all.files = T)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
swap_file = "swap.swp"
swap_exe = "C:/Users/mosh/Documents/rswap_local/swap.exe"
projs <- list.files("C:/Users/mosh/Documents/rswap_local/", full.names = T)
projs<-projs[-(grepl(x=projs, ".exe") %>% which())]
sample(projs, 8)
for (project_path in sample(projs, 8)) {
status <- run_swap(project_path, verbose = T, autoset_output = T)
if(status != "100"){
stop("FAILED at", project_path)
}
}
prostatus <-
run_swap(
project_path = "C:/Users/mosh/Documents/rswap_local/tetves",
verbose = T,
autoset_output = T
)
modelled_data <- read_swap_output(project_path = project_path)
parse_swp_file(project_path, "swap.swp")
modelled_data$daily_output
modelled_data$custom_depth
observed_data <- load_observed(project_path)
observed_data$data
observed_data$observed_variables
get_depths(observed_data$data, variable = "WC")
plot_over_under(project_path,
variable = "WC",
depth = c(15, 40, 70))
project_path
run_swap(project_path, autoset_output = T)
get_performance(project_path)
get_performance(project_path, stat = "NSE")
get_performance(project_path, var = "WC")
get_performance(project_path)
project_path
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
modelled_data <- read_swap_output(project_path = project_path)
parse_swp_file(project_path, "swap.swp")
modelled_data$daily_output
modelled_data$custom_depth
observed_data <- load_observed(project_path)
observed_data$data
observed_data$observed_variables
get_depths(observed_data$data, variable = "WC")
plot_over_under(project_path,
variable = "WC",
depth = c(15, 40, 70))
get_performance(project_path)
get_performance(project_path, stat = "NSE")
get_performance(project_path, var = "WC")
get_performance(project_path, depth = 15)
get_performance(project_path, stat = "NSE", var = "WC")
get_performance(project_path, stat = "NSE", depth = 15)
get_performance(project_path,
stat = "NSE",
depth = 15,
var = "WC")
save_run(project_path, "hi45")
comparative_plot(project_path, variable = "WC", depth = 15)
plot_statistics(
project_path,
var = "WC",
stat = "PBIAS",
depth = c(15, 40, 70),
graph = "ggplot"
)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
parsed <- parse_swp_file(project_path, swap_file = "swap.swp")
parameters <- change_swap_par(param = parsed$parameters, name = "COFRED", value = 0.55)
write_swap_file(parameters = parameters, table_path = parsed$table_path, outpath = paste0(project_path, "/modified.swp"))
parsed <- parse_swp_file(project_path, "modified.swp")
run_swap(project_path, "modified.swp",verbose = T )
save_run(project_path, "frank5")
plot_statistics(
project_path,
var = "WC",
stat = "RMSE",
depth = c(15, 40, 70),
graph = "ggplot"
)
devtools::document()
roxygen2::roxygenise()
pkgdown::build_site()
project_path
path <- paste0(project_path, "/rswap_observed_data.csv")
data <- read.table(file = path, header = T, sep = ";", dec = ",")
data
data <- read.table(file = path, header = T, sep = ";", dec = ",") %>% tibble()
data
data$DATE <- data$DATE %>% as.Date() # force date format
# SUPPORTED FORMAT: sep=; dec=,
data <- read.table(file = path, header = T, sep = ";", dec = ",") %>% tibble()
data$DATE <- data$DATE %>% as.Date() # force date format
columns <- colnames(data)
date_col <- columns %>% grepl(x = ., "DATE") %>% which()
obs_cols <- columns[-date_col]
data
library(rswap)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
observed_data <- load_observed(project_path)
observed_data
project_path
library(rswap)
prostatus <-
run_swap(
project_path = "C:/Users/mosh/Documents/rswap_local/tetves",
verbose = T,
autoset_output = T
)
library(rswap)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
swap_file = "swap.swp"
swap_exe = "C:/Users/mosh/Documents/rswap_local/swap.exe"
rswap::rswap_init(swap_exe)
library(rswap)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
swap_file = "swap.swp"
swap_exe = "C:/Users/mosh/Documents/rswap_local/swap.exe"
rswap::rswap_init(swap_exe)
run_swap(project_path, verbose = T)
projs <- list.files("C:/Users/mosh/Documents/rswap_local/", full.names = T)
projs<-projs[-(grepl(x=projs, ".exe") %>% which())]
sample(projs, 8)
prostatus <-
run_swap(
project_path = "C:/Users/mosh/Documents/rswap_local/tetves",
verbose = T,
autoset_output = T
)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
modelled_data <- read_swap_output(project_path = project_path)
parse_swp_file(project_path, "swap.swp")
modelled_data$daily_output
modelled_data$custom_depth
observed_data <- load_observed(project_path)
observed_data$data
observed_data <- load_observed(project_path)
project_path
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
swap_file = "swap.swp"
swap_exe = "C:/Users/mosh/Documents/rswap_local/swap.exe"
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
modelled_data <- read_swap_output(project_path = project_path)
parse_swp_file(project_path, "swap.swp")
modelled_data$daily_output
modelled_data$custom_depth
observed_data <- load_observed(project_path)
observed_data$data
observed_data$observed_variables
get_depths(observed_data$data, variable = "WC")
plot_over_under(project_path,
variable = "WC",
depth = c(15, 40, 70))
get_performance(project_path)
get_performance(project_path, stat = "NSE")
get_performance(project_path, var = "WC")
get_performance(project_path, depth = 15)
get_performance(project_path, stat = "NSE", var = "WC")
get_performance(project_path, stat = "NSE", depth = 15)
get_performance(project_path,
stat = "NSE",
depth = 15,
var = "WC")
save_run(project_path, "hi45")
comparative_plot(project_path, variable = "WC", depth = 15)
plot_statistics(
project_path,
var = "WC",
stat = "PBIAS",
depth = c(15, 40, 70),
graph = "ggplot"
)
project_path = "C:/Users/mosh/Documents/rswap_local/tetves"
parsed <- parse_swp_file(project_path, swap_file = "swap.swp")
parameters <- change_swap_par(param = parsed$parameters, name = "COFRED", value = 0.55)
write_swap_file(parameters = parameters, table_path = parsed$table_path, outpath = paste0(project_path, "/modified.swp"))
parsed <- parse_swp_file(project_path, "modified.swp")
run_swap(project_path, "modified.swp",verbose = T )
save_run(project_path, "frank5")
plot_statistics(
project_path,
var = "WC",
stat = "RMSE",
depth = c(15, 40, 70),
graph = "ggplot"
)
projs <- list.files("C:/Users/mosh/Documents/rswap_local/", full.names = T)
projs<-projs[-(grepl(x=projs, ".exe") %>% which())]
sample(projs, 8)
for (project_path in sample(projs, 8)) {
status <- run_swap(project_path, verbose = T, autoset_output = T)
if(status != "100"){
stop("FAILED at", project_path)
}
}
pkgdown::build_site()
pkgdown::preview_page('404.html')
pkgdown::build_site()
pkgdown::build_site()
library(rswap)
library(rswap)
pkgdown::build_site()
pkgdown::deploy_to_branch(branch = "gh-pages")
pkgdown::build_site()
pkgdown::deploy_to_branch(branch = "gh-pages")
pkgdown::deploy_to_branch(branch = "gh-pages")
