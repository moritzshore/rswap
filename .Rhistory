file =  paste0(project_path, "/rswap/", outfile),
quote = F,
row.names = F,
col.names = T,
append = T
) %>% suppressWarnings()
}
return(paste0(project_path, "/rswap/", outfile))
}
source("~/read_parameters.R")
parse_swp_file(project_path)
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path)
loc
source("~/read_parameters.R")
cat("swap file written to:\n", paste0(project_path, "/rswap/", outfile) )
source("~/read_parameters.R")
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
status <- rswap::run_swap(
project_path = project_path,
swap_file = "rswap.swp",
swap_exe = swap_exe ,
verbose = T,
timeout = 10
)
swap_exe = "C:/Users/mosh/Documents/swap.exe"
swap_file = "swap.swp"
status <- rswap::run_swap(
project_path = project_path,
swap_file = "rswap.swp",
swap_exe = swap_exe ,
verbose = T,
timeout = 10
)
project_path
status <- rswap::run_swap(
project_path = project_path,
swap_file = "rswap.swp",
swap_exe = swap_exe ,
verbose = T,
timeout = 10
)
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
status <- rswap::run_swap(
project_path = project_path,
swap_file = "rswap.swp",
swap_exe = swap_exe ,
verbose = T,
timeout = 10
)
status <- rswap::run_swap(
project_path = project_path,
swap_file = "rswap.swp",
swap_exe = swap_exe ,
verbose = T,
timeout = 10
)
swap_wd
swap_exe
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run( command = "swap.exe", wd = , args = fixed_path,
fixed_path
fixed_path
msg <- run(command = "swap.exe", wd = swap_wd , args = "rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
library(processx)
msg <- run(command = "swap.exe", wd = swap_wd , args = "rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
timeout = 10
verbose = T
msg <- run(command = "swap.exe", wd = swap_wd , args = "rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
swap_wd
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
tables
test = write.table(
read,
file =  paste0(project_path, "/rswap/", outfile),
quote = F,
row.names = F,
col.names = T,
append = T
) %>% suppressWarnings()
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
source("~/read_parameters.R")
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
quick_fix <- readLines( paste0(project_path, "/rswap/", outfile))
quick_fix
problem <- quick_fix %>% grepl(x=., "TRUE.") %>% which()
problem
quick_fix <- quick_fix[-problem]
quick_fix
quick_fix
writeLines(text = quick_fix, con = outpath, sep = " ")
outpath = paste0(project_path, "/rswap/", outfile)
writeLines(text = quick_fix, con = outpath, sep = " ")
outpath
if (outpath %>% is.null()) {
outpath = paste0(project_path, "/rswap/", outfile)
}
write.table(
x = paste("* SWAP main file created by rswap", version, "at", Sys.time()),
file = outpath,
quote = F,
col.names = F,
row.names = F,
append = F
)
par_write = paste(parameters$param, "=", parameters$value)
parameters = res$parameters
table_path = res$table_path
version = "v1.0" # TODO version should be some kind of global variable)
if (outpath %>% is.null()) {
outpath = paste0(project_path, "/rswap/", outfile)
}
write.table(
x = paste("* SWAP main file created by rswap", version, "at", Sys.time()),
file = outpath,
quote = F,
col.names = F,
row.names = F,
append = F
)
par_write = paste(parameters$param, "=", parameters$value)
write.table(
par_write,
file =  outpath,
quote = F,
row.names = F,
col.names = F,
append = T
)
tables <- list.files(table_path, full.names = T)
for (table in tables) {
read <- read.table(table, col.names = T)
test = write.table(
read,
file =  outpath,
quote = F,
row.names = F,
col.names = T,
append = T
) %>% suppressWarnings()
}
quick_fix <- readLines(outpath)
problem <- quick_fix %>% grepl(x=., "TRUE.") %>% which()
quick_fix <- quick_fix[-problem]
quick_fix
outpath
quick_fix <- read.table(outpath)
quick_fix <- read.table(outpath,fill = F)
quick_fix <- read.table(outpath,fill = T)
quick_fix
View(quick_fix)
problem <- quick_fix %>% grepl(x=., "TRUE.") %>% which()
problem
problem <- quick_fix$V1 %>% grepl(x=., "TRUE.") %>% which()
problem
quick_fix <- quick_fix[-problem]
quick_fix
outpath
write.table(x = quick_fix, outpath, append = F, quote = F, row.names = F, col.names = F)
quick_fix
View(quick_fix)
problem <- quick_fix$V1 %>% grepl(x=., "TRUE.") %>% which()
problem
quick_fix
quick_fix <- quick_fix[-problem,]
View(quick_fix)
quick_fix <- read.table(outpath,fill = T)
problem <- quick_fix$V1 %>% grepl(x=., "TRUE.") %>% which()
quick_fix <- quick_fix[-problem,]
write.table(x = quick_fix, outpath, append = F, quote = F, row.names = F, col.names = F)
if(verbose){
cat("swap file written to:\n",outpath)
}
tables <- list.files(table_path, full.names = T)
for (table in tables) {
read <- read.table(table, col.names = T)
test = write.table(
read,
file =  outpath,
quote = F,
row.names = F,
col.names = T,
append = T
) %>% suppressWarnings()
}
#' @param project_path (REQ) (string) path to project directory
#' @param parameters (REQ) (dataframe) dataframe of project parameters as created
#' by the parse_swap_file() function
#' @param table_path (REQ) (string) path to swap tables stored as .csv as written
#' # by the parse_swap_file() function
#' @param outpath (OPT) (string) custom write location, defaults to project_directory/rswap/
#' @param outfile (OPT) (string) custom file name. defaults to rswap.swp
#' @param verbose (OPT) (boolean) print status?
#'
#' @export
write_swap_file <-
function(project_path,
parameters,
table_path,
outpath = NULL,
outfile = "rswap.swp",
verbose = F) {
version = "v1.0" # TODO version should be some kind of global variable)
if (outpath %>% is.null()) {
outpath = paste0(project_path, "/rswap/", outfile)
}
write.table(
x = paste("* SWAP main file created by rswap", version, "at", Sys.time()),
file = outpath,
quote = F,
col.names = F,
row.names = F,
append = F
)
par_write = paste(parameters$param, "=", parameters$value)
write.table(
par_write,
file =  outpath,
quote = F,
row.names = F,
col.names = F,
append = T
)
tables <- list.files(table_path, full.names = T)
for (table in tables) {
read <- read.table(table, col.names = T)
test = write.table(
read,
file =  outpath,
quote = F,
row.names = F,
col.names = T,
append = T
) %>% suppressWarnings()
}
quick_fix <- read.table(outpath,fill = T)
problem <- quick_fix$V1 %>% grepl(x=., "TRUE.") %>% which()
quick_fix <- quick_fix[-problem,]
write.table(x = quick_fix, outpath, append = F, quote = F, row.names = F, col.names = F)
if(verbose){
cat("swap file written to:\n",outpath)
}
return(paste0(project_path, "/rswap/", outfile))
}
if (outpath %>% is.null()) {
outpath = paste0(project_path, "/rswap/", outfile)
}
write.table(
x = paste("* SWAP main file created by rswap", version, "at", Sys.time()),
file = outpath,
quote = F,
col.names = F,
row.names = F,
append = F
)
par_write = paste(parameters$param, "=", parameters$value)
write.table(
par_write,
file =  outpath,
quote = F,
row.names = F,
col.names = F,
append = T
)
tables <- list.files(table_path, full.names = T)
for (table in tables) {
read <- read.table(table, col.names = T)
test = write.table(
read,
file =  outpath,
quote = F,
row.names = F,
col.names = T,
append = T
) %>% suppressWarnings()
}
test = write.table(
read,
file =  outpath,
quote = F,
row.names = F,
col.names = T,
append = T, sep = " "
) %>% suppressWarnings()
version = "v1.0" # TODO version should be some kind of global variable)
if (outpath %>% is.null()) {
outpath = paste0(project_path, "/rswap/", outfile)
}
write.table(
x = paste("* SWAP main file created by rswap", version, "at", Sys.time()),
file = outpath,
quote = F,
col.names = F,
row.names = F,
append = F
)
par_write = paste(parameters$param, "=", parameters$value)
write.table(
par_write,
file =  outpath,
quote = F,
row.names = F,
col.names = F,
append = T
)
tables <- list.files(table_path, full.names = T)
for (table in tables) {
read <- read.table(table, col.names = T)
test = write.table(
read,
file =  outpath,
quote = F,
row.names = F,
col.names = T,
append = T, sep = " "
) %>% suppressWarnings()
}
test
read
read <- read.table(table, col.names = T, sep = ",")
table
read <- read.table(table, col.names = T, sep = ",")
read
version = "v1.0" # TODO version should be some kind of global variable)
if (outpath %>% is.null()) {
outpath = paste0(project_path, "/rswap/", outfile)
}
write.table(
x = paste("* SWAP main file created by rswap", version, "at", Sys.time()),
file = outpath,
quote = F,
col.names = F,
row.names = F,
append = F
)
par_write = paste(parameters$param, "=", parameters$value)
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
par_write
par_write
source("~/read_parameters.R")
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
tables <- list.files(table_path, full.names = T)
tables
read <- read.table(table, col.names = T, sep = ",")
table
read <- read.table(table, col.names = T, sep = ",")
read
read <- read.table(table, sep = ",")
read
read <- read_csv(table, sep = ",", col_names = T)
read <- read_csv(table, sep = ",", col_names = T)
read <- read_csv(table, col_names = T)
read <- read_csv(table, col_names = T, progress = F)
read <- read_csv(table, col_names = T, show_col_types = F)
read
source("~/read_parameters.R")
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
source("~/read_parameters.R")
source("~/read_parameters.R")
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
read <- read_csv(table, col_names = T, show_col_types = F, col_types = "char")
table
read <- read_csv(table, col_names = T, show_col_types = F, col_types = "char")
read_csv(table, col_names = T, show_col_types = F, col_types = "char")
read.csv(table)
read<-read.csv(table)
write.table(
read,
file =  outpath,
quote = F,
row.names = F,
col.names = T,
append = T, sep = " "
) %>% suppressWarnings()
outpath
source("~/read_parameters.R")
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
read<-read.csv(table)
read
read %>% tibble()
read$ZI <- read$ZI %>% as.character()
read
read %>% tibble()
read$ZI
read<-read.csv(table, quote = T)
read<-read.csv(table, as.is = T)
read
read$ZI <- read$ZI %>% as.character()
read
read<-read.csv(table, as.is = T)
read<-read.csv(table, as.is = T) %>% tibble()
read.csv(table, as.is = T) %>% tibble()
read.csv(table, colClasses = "char") %>% tibble()
read.csv(table, colClasses = "character") %>% tibble()
source("~/read_parameters.R")
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
read<-read.csv(table, colClasses = "character") %>% tibble()
source("~/read_parameters.R")
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
res <- parse_swp_file(project_path)
loc <- write_swap_file(project_path, parameters = res$parameters, table_path = res$table_path, verbose = T)
swap_path_split = swap_exe %>% str_split("swap.exe", simplify = T)
swap_wd <- swap_path_split[,1]
msg <- run(command = "swap.exe", wd = swap_wd , args = "tetves/rswap/rswap.swp",
error_on_status = F,
timeout = timeout,
echo_cmd = verbose,
echo = verbose)
res$parameters
library(rswap)
library(rswap)
library(rswap)
library(rswap)
library(rswap)
